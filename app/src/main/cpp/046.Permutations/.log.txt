
warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="46",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="0",script={"slience","pwhile"},original-location="solution.cpp:49"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 

Breakpoint 1, Solution::permute (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:49
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"slience","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="0",script={"slient","pwhile"},original-location="solution.cpp:49"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 

Breakpoint 2, Solution::permute (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:49
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"slient","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="0",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="2",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="3",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="4",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="5",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="6",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="7",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="8",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="9",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="46",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000e27",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="48",thread-groups=["i1"],times="0",script={"silent","pwhile"},original-location="solution.cpp:48"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="0",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="2",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="3",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="4",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e49\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e49",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="50"}
Solution::nextPermutation (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:8
~"\n\032\032frame-begin 0 0x555555554b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b39",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="8"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e49\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e49",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="50"}
Solution::nextPermutation (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:8
~"\n\032\032frame-begin 0 0x555555554b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b39",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="8"}
~"\n\032\032frame-begin 0 0x555555554b68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b68",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="10"}
~"\n\032\032frame-begin 0 0x555555554b8c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b8c",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="11"}
0x0000555555554e60 in Solution::permute (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:50
~"\n\032\032frame-begin 0 0x555555554e60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e60",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="50"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e49\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e49",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="50"}
Solution::nextPermutation (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:8
~"\n\032\032frame-begin 0 0x555555554b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b39",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="8"}
Solution::nextPermutation (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:10
~"\n\032\032frame-begin 0 0x555555554b68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b68",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="10"}
~"\n\032\032frame-begin 0 0x555555554b8c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b8c",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="11"}
~"\n\032\032frame-begin 0 0x555555554ba8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ba8",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="13"}
~"\n\032\032frame-begin 0 0x555555554d02\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554d02",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="34"}
~"\n\032\032frame-begin 0 0x555555554d1c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554d1c",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="35"}
~"\n\032\032frame-begin 0 0x555555554d7e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554d7e",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="37"}
~"\n\032\032frame-begin 0 0x555555554da5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554da5",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="11"}
&"complete fi\n"
~"file\n"
~"find\n"
~"finish\n"
^done
#0  Solution::nextPermutation (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:11
0x0000555555554e60 in Solution::permute (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:50
Value returned is $11 = std::vector of length 4, capacity 4 = {[0] = 1, [1] = 2, [2] = 4, [3] = 3}
~"\n\032\032frame-begin 0 0x555555554e60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e60",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="50"}
~"\n\032\032frame-begin 0 0x555555554e7f\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e7f",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="2",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e49\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e49",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="50"}
Solution::nextPermutation (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:8
~"\n\032\032frame-begin 0 0x555555554b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b39",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="8"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e49\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e49",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="50"}
Solution::nextPermutation (this=0x7fffffffdabf, num=std::vector of length 4, capacity 4 = {...}) at solution.cpp:8
~"\n\032\032frame-begin 0 0x555555554b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b39",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="8"}
~"\n\032\032frame-begin 0 0x555555554b68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b68",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="10"}
~"\n\032\032frame-begin 0 0x555555554b8c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b8c",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="11"}
~"\n\032\032frame-begin 0 0x555555554ba8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ba8",func="Solution::nextPermutation",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="13"}
~"\n\032\032frame-begin 0 0x555555554ba8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ba8",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555554ba8:\tmov    -0x20(%rbp),%eax\n"
~"   0x555555554bab:\tmovslq %eax,%rdx\n"
~"   0x555555554bae:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554bb2:\tmov    %rdx,%rsi\n"
~"   0x555555554bb5:\tmov    %rax,%rdi\n"
~"   0x555555554bb8:\tcallq  0x55555555504c\n"
~"   0x555555554bbd:\tmov    (%rax),%eax\n"
~"   0x555555554bbf:\tcmp    %eax,-0x24(%rbp)\n"
~"   0x555555554bc2:\tsetg   %al\n"
~"   0x555555554bc5:\ttest   %al,%al\n"
~"   0x555555554bc7:\tje     0x555555554d02\n"
~"   0x555555554bcd:\tmov    -0x20(%rbp),%eax\n"
~"   0x555555554bd0:\tmovslq %eax,%rdx\n"
~"   0x555555554bd3:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554bd7:\tmov    %rdx,%rsi\n"
~"   0x555555554bda:\tmov    %rax,%rdi\n"
~"   0x555555554bdd:\tcallq  0x55555555504c\n"
~"   0x555555554be2:\tmov    (%rax),%eax\n"
~"   0x555555554be4:\tmov    %eax,-0x14(%rbp)\n"
~"   0x555555554be7:\tmovl   $0x0,-0x1c(%rbp)\n"
~"   0x555555554bee:\tmov    -0x20(%rbp),%eax\n"
~"   0x555555554bf1:\tadd    $0x1,%eax\n"
~"   0x555555554bf4:\tmov    %eax,-0x1c(%rbp)\n"
~"   0x555555554bf7:\tmov    -0x1c(%rbp),%eax\n"
~"   0x555555554bfa:\tmovslq %eax,%rbx\n"
~"   0x555555554bfd:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554c01:\tmov    %rax,%rdi\n"
~"   0x555555554c04:\tcallq  0x555555554ecc\n"
~"   0x555555554c09:\tcmp    %rax,%rbx\n"
~"   0x555555554c0c:\tsetb   %al\n"
~"   0x555555554c0f:\ttest   %al,%al\n"
~"   0x555555554c11:\tje     0x555555554caa\n"
~"   0x555555554c17:\tmov    -0x1c(%rbp),%eax\n"
~"   0x555555554c1a:\tmovslq %eax,%rdx\n"
~"   0x555555554c1d:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554c21:\tmov    %rdx,%rsi\n"
~"   0x555555554c24:\tmov    %rax,%rdi\n"
~"   0x555555554c27:\tcallq  0x55555555504c\n"
~"   0x555555554c2c:\tmov    (%rax),%eax\n"
~"   0x555555554c2e:\tcmp    %eax,-0x14(%rbp)\n"
~"   0x555555554c31:\tsetl   %al\n"
~"   0x555555554c34:\ttest   %al,%al\n"
~"   0x555555554c36:\tje     0x555555554ca1\n"
~"   0x555555554c38:\tmov    -0x1c(%rbp),%eax\n"
~"   0x555555554c3b:\tmovslq %eax,%rdx\n"
~"   0x555555554c3e:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554c42:\tmov    %rdx,%rsi\n"
~"   0x555555554c45:\tmov    %rax,%rdi\n"
~"   0x555555554c48:\tcallq  0x55555555504c\n"
~"   0x555555554c4d:\tmov    %rax,%rbx\n"
~"   0x555555554c50:\tmov    -0x20(%rbp),%eax\n"
~"   0x555555554c53:\tmovslq %eax,%rdx\n"
~"   0x555555554c56:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554c5a:\tmov    %rdx,%rsi\n"
~"   0x555555554c5d:\tmov    %rax,%rdi\n"
~"   0x555555554c60:\tcallq  0x55555555504c\n"
~"   0x555555554c65:\tmov    %rax,%rdx\n"
~"   0x555555554c68:\tmov    (%rbx),%eax\n"
~"   0x555555554c6a:\tmov    %eax,(%rdx)\n"
~"   0x555555554c6c:\tmov    -0x1c(%rbp),%eax\n"
~"   0x555555554c6f:\tmovslq %eax,%rdx\n"
~"   0x555555554c72:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554c76:\tmov    %rdx,%rsi\n"
~"   0x555555554c79:\tmov    %rax,%rdi\n"
~"   0x555555554c7c:\tcallq  0x55555555504c\n"
~"   0x555555554c81:\tmov    %rax,%rdx\n"
~"   0x555555554c84:\tmov    -0x14(%rbp),%eax\n"
~"   0x555555554c87:\tmov    %eax,(%rdx)\n"
~"   0x555555554c89:\tmov    -0x48(%rbp),%rdx\n"
~"   0x555555554c8d:\tmov    -0x38(%rbp),%rax\n"
~"   0x555555554c91:\tmov    %rdx,%rsi\n"
~"   0x555555554c94:\tmov    %rax,%rdi\n"
~"   0x555555554c97:\tcallq  0x555555554ef2\n"
~"   0x555555554c9c:\tjmpq   0x555555554dc1\n"
~"   0x555555554ca1:\taddl   $0x1,-0x1c(%rbp)\n"
~"   0x555555554ca5:\tjmpq   0x555555554bf7\n"
~"   0x555555554caa:\tmov    -0x1c(%rbp),%eax\n"
~"   0x555555554cad:\tmovslq %eax,%rbx\n"
~"   0x555555554cb0:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554cb4:\tmov    %rax,%rdi\n"
~"   0x555555554cb7:\tcallq  0x555555554ecc\n"
~"   0x555555554cbc:\tcmp    %rax,%rbx\n"
~"   0x555555554cbf:\tsete   %al\n"
~"   0x555555554cc2:\ttest   %al,%al\n"
~"   0x555555554cc4:\tje     0x555555554da5\n"
~"   0x555555554cca:\tmov    -0x1c(%rbp),%eax\n"
~"   0x555555554ccd:\tsub    $0x1,%eax\n"
~"   0x555555554cd0:\tmovslq %eax,%rdx\n"
~"   0x555555554cd3:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554cd7:\tmov    %rdx,%rsi\n"
~"   0x555555554cda:\tmov    %rax,%rdi\n"
~"   0x555555554cdd:\tcallq  0x55555555504c\n"
~"   0x555555554ce2:\tmov    %rax,%rdx\n"
~"   0x555555554ce5:\tmov    -0x14(%rbp),%eax\n"
~"   0x555555554ce8:\tmov    %eax,(%rdx)\n"
~"   0x555555554cea:\tmov    -0x48(%rbp),%rdx\n"
~"   0x555555554cee:\tmov    -0x38(%rbp),%rax\n"
~"   0x555555554cf2:\tmov    %rdx,%rsi\n"
~"   0x555555554cf5:\tmov    %rax,%rdi\n"
~"   0x555555554cf8:\tcallq  0x555555554ef2\n"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555554e33:\tmov    -0x38(%rbp),%rax\n"
~"   0x555555554e37:\tlea    -0x1(%rax),%rdx\n"
~"   0x555555554e3b:\tmov    %rdx,-0x38(%rbp)\n"
~"   0x555555554e3f:\ttest   %rax,%rax\n"
~"   0x555555554e42:\tsetne  %al\n"
~"   0x555555554e45:\ttest   %al,%al\n"
~"   0x555555554e47:\tje     0x555555554eac\n"
~"   0x555555554e49:\tlea    -0x30(%rbp),%rax\n"
~"   0x555555554e4d:\tmov    -0x58(%rbp),%rdx\n"
~"   0x555555554e51:\tmov    -0x50(%rbp),%rcx\n"
~"   0x555555554e55:\tmov    %rcx,%rsi\n"
~"   0x555555554e58:\tmov    %rax,%rdi\n"
~"   0x555555554e5b:\tcallq  0x555555554b24\n"
~"   0x555555554e60:\tlea    -0x30(%rbp),%rdx\n"
~"   0x555555554e64:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554e68:\tmov    %rdx,%rsi\n"
~"   0x555555554e6b:\tmov    %rax,%rdi\n"
~"   0x555555554e6e:\tcallq  0x5555555550da\n"
~"   0x555555554e73:\tlea    -0x30(%rbp),%rax\n"
~"   0x555555554e77:\tmov    %rax,%rdi\n"
~"   0x555555554e7a:\tcallq  0x555555555008\n"
~"   0x555555554e7f:\tjmp    0x555555554e33\n"
~"   0x555555554e81:\tmov    %rax,%rbx\n"
~"   0x555555554e84:\tlea    -0x30(%rbp),%rax\n"
~"   0x555555554e88:\tmov    %rax,%rdi\n"
~"   0x555555554e8b:\tcallq  0x555555555008\n"
~"   0x555555554e90:\tjmp    0x555555554e95\n"
~"   0x555555554e92:\tmov    %rax,%rbx\n"
~"   0x555555554e95:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554e99:\tmov    %rax,%rdi\n"
~"   0x555555554e9c:\tcallq  0x555555555088\n"
~"   0x555555554ea1:\tmov    %rbx,%rax\n"
~"   0x555555554ea4:\tmov    %rax,%rdi\n"
~"   0x555555554ea7:\tcallq  0x5555555548f0\n"
~"   0x555555554eac:\tnop\n"
~"   0x555555554ead:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554eb1:\tmov    -0x18(%rbp),%rcx\n"
~"   0x555555554eb5:\txor    %fs:0x28,%rcx\n"
~"   0x555555554ebe:\tje     0x555555554ec5\n"
~"   0x555555554ec0:\tcallq  0x5555555548b0\n"
~"   0x555555554ec5:\tadd    $0x58,%rsp\n"
~"   0x555555554ec9:\tpop    %rbx\n"
~"   0x555555554eca:\tpop    %rbp\n"
~"   0x555555554ecb:\tretq   \n"
~"   0x555555554ecc:\tpush   %rbp\n"
~"   0x555555554ecd:\tmov    %rsp,%rbp\n"
~"   0x555555554ed0:\tmov    %rdi,-0x8(%rbp)\n"
~"   0x555555554ed4:\tmov    -0x8(%rbp),%rax\n"
~"   0x555555554ed8:\tmov    0x8(%rax),%rax\n"
~"   0x555555554edc:\tmov    %rax,%rdx\n"
~"   0x555555554edf:\tmov    -0x8(%rbp),%rax\n"
~"   0x555555554ee3:\tmov    (%rax),%rax\n"
~"   0x555555554ee6:\tsub    %rax,%rdx\n"
~"   0x555555554ee9:\tmov    %rdx,%rax\n"
~"   0x555555554eec:\tsar    $0x2,%rax\n"
~"   0x555555554ef0:\tpop    %rbp\n"
~"   0x555555554ef1:\tretq   \n"
~"   0x555555554ef2:\tpush   %rbp\n"
~"   0x555555554ef3:\tmov    %rsp,%rbp\n"
~"   0x555555554ef6:\tpush   %r13\n"
~"   0x555555554ef8:\tpush   %r12\n"
~"   0x555555554efa:\tpush   %rbx\n"
~"   0x555555554efb:\tsub    $0x28,%rsp\n"
~"   0x555555554eff:\tmov    %rdi,-0x38(%rbp)\n"
~"   0x555555554f03:\tmov    %rsi,-0x40(%rbp)\n"
~"   0x555555554f07:\tmov    %fs:0x28,%rax\n"
~"   0x555555554f10:\tmov    %rax,-0x28(%rbp)\n"
~"   0x555555554f14:\txor    %eax,%eax\n"
~"   0x555555554f16:\tmov    -0x38(%rbp),%rbx\n"
~"   0x555555554f1a:\tmov    -0x40(%rbp),%rax\n"
~"   0x555555554f1e:\tmov    %rax,%rdi\n"
~"   0x555555554f21:\tcallq  0x555555555292\n"
~"   0x555555554f26:\tmov    %rax,%rdx\n"
~"   0x555555554f29:\tlea    -0x29(%rbp),%rax\n"
~"   0x555555554f2d:\tmov    %rdx,%rsi\n"
~"   0x555555554f30:\tmov    %rax,%rdi\n"
~"   0x555555554f33:\tcallq  0x555555555246\n"
~"   0x555555554f38:\tmov    -0x40(%rbp),%rax\n"
~"   0x555555554f3c:\tmov    %rax,%rdi\n"
~"   0x555555554f3f:\tcallq  0x555555554ecc\n"
~"   0x555555554f44:\tmov    %rax,%rcx\n"
~"   0x555555554f47:\tlea    -0x29(%rbp),%rax\n"
~"   0x555555554f4b:\tmov    %rax,%rdx\n"
~"   0x555555554f4e:\tmov    %rcx,%rsi\n"
~"   0x555555554f51:\tmov    %rbx,%rdi\n"
~"   0x555555554f54:\tcallq  0x5555555552bc\n"
~"   0x555555554f59:\tlea    -0x29(%rbp),%rax\n"
~"   0x555555554f5d:\tmov    %rax,%rdi\n"
~"   0x555555554f60:\tcallq  0x555555555128\n"
~"   0x555555554f65:\tmov    -0x38(%rbp),%rax\n"
~"   0x555555554f69:\tmov    %rax,%rdi\n"
~"   0x555555554f6c:\tcallq  0x555555555412\n"
~"   0x555555554f71:\tmov    %rax,%r13\n"
~"   0x555555554f74:\tmov    -0x38(%rbp),%rax\n"
~"   0x555555554f78:\tmov    (%rax),%rbx\n"
~"   0x555555554f7b:\tmov    -0x40(%rbp),%rax\n"
~"   0x555555554f7f:\tmov    %rax,%rdi\n"
~"   0x555555554f82:\tcallq  0x5555555553be\n"
~"   0x555555554f87:\tmov    %rax,%r12\n"
~"   0x555555554f8a:\tmov    -0x40(%rbp),%rax\n"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e49\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e49",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="50"}
~"\n\032\032frame-begin 0 0x555555554e7f\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e7f",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="2",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="3",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="4",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="5",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="6",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="7",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="8",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="9",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="10",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="11",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="12",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="13",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="14",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="15",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554e33",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="16",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
~"\n\032\032frame-begin 0 0x555555554e33\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e33",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000fba",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="16",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554fba\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554fba",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554fba",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
&"complete file a.ou\n"
~"file a.out\n"
^done
~"\n\032\032frame-begin 0 0x555555554fba\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554fba",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000fba",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555554fba:\tmov    -0x3c(%rbp),%eax\n"
~"   0x555555554fbd:\tcltq   \n"
~"   0x555555554fbf:\tmov    -0x38(%rbp),%rdx\n"
~"   0x555555554fc3:\timul   %rdx,%rax\n"
~"   0x555555554fc7:\tmov    %rax,-0x38(%rbp)\n"
~"   0x555555554fcb:\tsubl   $0x1,-0x3c(%rbp)\n"
~"   0x555555554fcf:\tjmp    0x555555554fb4\n"
~"   0x555555554fd1:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555554fd5:\tmov    %rax,%rdi\n"
~"   0x555555554fd8:\tcallq  0x555555555d72\n"
~"   0x555555554fdd:\tmov    -0x38(%rbp),%rax\n"
~"   0x555555554fe1:\tlea    -0x1(%rax),%rdx\n"
~"   0x555555554fe5:\tmov    %rdx,-0x38(%rbp)\n"
~"   0x555555554fe9:\ttest   %rax,%rax\n"
~"   0x555555554fec:\tsetne  %al\n"
~"   0x555555554fef:\ttest   %al,%al\n"
~"   0x555555554ff1:\tje     0x555555555056\n"
~"   0x555555554ff3:\tlea    -0x30(%rbp),%rax\n"
~"   0x555555554ff7:\tmov    -0x58(%rbp),%rdx\n"
~"   0x555555554ffb:\tmov    -0x50(%rbp),%rcx\n"
~"   0x555555554fff:\tmov    %rcx,%rsi\n"
~"   0x555555555002:\tmov    %rax,%rdi\n"
~"   0x555555555005:\tcallq  0x555555554cce\n"
~"   0x55555555500a:\tlea    -0x30(%rbp),%rdx\n"
~"   0x55555555500e:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555555012:\tmov    %rdx,%rsi\n"
~"   0x555555555015:\tmov    %rax,%rdi\n"
~"   0x555555555018:\tcallq  0x555555555de0\n"
~"   0x55555555501d:\tlea    -0x30(%rbp),%rax\n"
~"   0x555555555021:\tmov    %rax,%rdi\n"
~"   0x555555555024:\tcallq  0x555555555d0e\n"
~"   0x555555555029:\tjmp    0x555555554fdd\n"
~"   0x55555555502b:\tmov    %rax,%rbx\n"
~"   0x55555555502e:\tlea    -0x30(%rbp),%rax\n"
~"   0x555555555032:\tmov    %rax,%rdi\n"
~"   0x555555555035:\tcallq  0x555555555d0e\n"
~"   0x55555555503a:\tjmp    0x55555555503f\n"
~"   0x55555555503c:\tmov    %rax,%rbx\n"
~"   0x55555555503f:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555555043:\tmov    %rax,%rdi\n"
~"   0x555555555046:\tcallq  0x555555555d8e\n"
~"   0x55555555504b:\tmov    %rbx,%rax\n"
~"   0x55555555504e:\tmov    %rax,%rdi\n"
~"   0x555555555051:\tcallq  0x5555555548f0\n"
~"   0x555555555056:\tnop\n"
~"   0x555555555057:\tmov    -0x48(%rbp),%rax\n"
~"   0x55555555505b:\tmov    -0x18(%rbp),%rcx\n"
~"   0x55555555505f:\txor    %fs:0x28,%rcx\n"
~"   0x555555555068:\tje     0x55555555506f\n"
~"   0x55555555506a:\tcallq  0x5555555548b0\n"
~"   0x55555555506f:\tadd    $0x58,%rsp\n"
~"   0x555555555073:\tpop    %rbx\n"
~"   0x555555555074:\tpop    %rbp\n"
~"   0x555555555075:\tretq   \n"
~"   0x555555555076:\tpush   %rbp\n"
~"   0x555555555077:\tmov    %rsp,%rbp\n"
~"   0x55555555507a:\tpush   %rbx\n"
~"   0x55555555507b:\tsub    $0x78,%rsp\n"
~"   0x55555555507f:\tmov    %rdi,-0x68(%rbp)\n"
~"   0x555555555083:\tmov    %rsi,-0x70(%rbp)\n"
~"   0x555555555087:\tmov    %rdx,-0x78(%rbp)\n"
~"   0x55555555508b:\tmov    %fs:0x28,%rax\n"
~"   0x555555555094:\tmov    %rax,-0x18(%rbp)\n"
~"   0x555555555098:\txor    %eax,%eax\n"
~"   0x55555555509a:\tmov    -0x68(%rbp),%rax\n"
~"   0x55555555509e:\tmov    %rax,%rdi\n"
~"   0x5555555550a1:\tcallq  0x555555555d72\n"
~"   0x5555555550a6:\tlea    -0x50(%rbp),%rax\n"
~"   0x5555555550aa:\tmov    %rax,%rdi\n"
~"   0x5555555550ad:\tcallq  0x555555555e54\n"
~"   0x5555555550b2:\tlea    -0x55(%rbp),%rax\n"
~"   0x5555555550b6:\tmov    %rax,%rdi\n"
~"   0x5555555550b9:\tcallq  0x555555555e70\n"
~"   0x5555555550be:\tmovl   $0x0,-0x54(%rbp)\n"
~"   0x5555555550c5:\tmov    -0x78(%rbp),%rax\n"
~"   0x5555555550c9:\tmov    %rax,%rdi\n"
~"   0x5555555550cc:\tcallq  0x555555555bd2\n"
~"   0x5555555550d1:\tmov    %rax,%rsi\n"
~"   0x5555555550d4:\tlea    -0x55(%rbp),%rcx\n"
~"   0x5555555550d8:\tlea    -0x54(%rbp),%rdx\n"
~"   0x5555555550dc:\tlea    -0x30(%rbp),%rax\n"
~"   0x5555555550e0:\tmov    %rax,%rdi\n"
~"   0x5555555550e3:\tcallq  0x555555555ea8\n"
~"   0x5555555550e8:\tlea    -0x55(%rbp),%rax\n"
~"   0x5555555550ec:\tmov    %rax,%rdi\n"
~"   0x5555555550ef:\tcallq  0x555555555e8c\n"
~"   0x5555555550f4:\tmov    -0x68(%rbp),%rdi\n"
~"   0x5555555550f8:\tlea    -0x50(%rbp),%rcx\n"
~"   0x5555555550fc:\tlea    -0x30(%rbp),%rdx\n"
~"   0x555555555100:\tmov    -0x78(%rbp),%rsi\n"
~"   0x555555555104:\tmov    -0x70(%rbp),%rax\n"
~"   0x555555555108:\tmov    %rdi,%r9\n"
~"   0x55555555510b:\tmov    %rcx,%r8\n"
~"   0x55555555510e:\tmov    %rdx,%rcx\n"
~"   0x555555555111:\tmov    $0x0,%edx\n"
~"   0x555555555116:\tmov    %rax,%rdi\n"
~"   0x555555555119:\tcallq  0x55555555519c\n"
~"   0x55555555511e:\tnop\n"
~"   0x55555555511f:\tlea    -0x30(%rbp),%rax\n"
~"   0x555555555123:\tmov    %rax,%rdi\n"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 
~"\n\032\032frame-begin 0 0x555555554fba\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554fba",func="Solution::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554fba",func="Solution::permute(std::vector<int, std::allocator<int> >&)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="49",thread-groups=["i1"],times="1",script={"silent","pwhile"},original-location="solution.cpp:49"}]}

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="138",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000a93",func="main(int, char**)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="155",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp:155"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 

Breakpoint 1, main (argc=1, argv=0x7fffffffdc08) at solution.cpp:155
~"\n\032\032frame-begin 0 0x555555554a93\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a93",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="155"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a93",func="main(int, char**)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="155",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp:155"}]}
~"\n\032\032frame-begin 0 0x555555554ab3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ab3",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="156"}
~"\n\032\032frame-begin 0 0x555555554ad3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ad3",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="157"}
~"\n\032\032frame-begin 0 0x555555554af3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554af3",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="158"}
~"\n\032\032frame-begin 0 0x555555554b10\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b10",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="159"}
~"\n\032\032frame-begin 0 0x555555554b2d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b2d",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="160"}
~"\n\032\032frame-begin 0 0x555555554b4a\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b4a",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="161"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 

Breakpoint 1, main (argc=1, argv=0x7fffffffdc08) at solution.cpp:155
~"\n\032\032frame-begin 0 0x555555554a93\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a93",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="155"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a93",func="main(int, char**)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="155",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp:155"}]}
~"\n\032\032frame-begin 0 0x555555554ab3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ab3",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="156"}
~"\n\032\032frame-begin 0 0x555555554ad3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ad3",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="157"}
~"\n\032\032frame-begin 0 0x555555554af3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554af3",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="158"}
~"\n\032\032frame-begin 0 0x555555554b10\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b10",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="159"}
Solution4::permute (this=0x7fffffffda1e, num=std::vector of length 0, capacity 4) at solution.cpp:116
~"\n\032\032frame-begin 0 0x5555555557c5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555557c5",func="Solution4::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="116"}
~"\n\032\032frame-begin 0 0x5555555557d4\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555557d4",func="Solution4::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="117"}
~"\n\032\032frame-begin 0 0x55555555584c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x000055555555584c",func="Solution4::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="118"}
~"\n\032\032frame-begin 0 0x555555555ac6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555ac6",func="Solution4::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="129"}
&"complete p re\n"
~"p re_acquire_state\n"
~"p re_acquire_state_context\n"
~"p re_backref_cache_entry\n"
~"p re_bitset_ptr_t\n"
~"p re_charset_t\n"
~"p re_comp\n"
~"p re_comp_buf\n"
~"p re_compile_fastmap\n"
~"p re_compile_fastmap_iter\n"
~"p re_compile_fastmap_iter.isra\n"
~"p re_compile_internal\n"
~"p re_compile_pattern\n"
~"p re_const_bitset_ptr_t\n"
~"p re_context_type\n"
~"p re_dfa_add_node\n"
~"p re_dfa_t\n"
~"p re_dfastate_t\n"
~"p re_exec\n"
~"p re_fail_stack_ent_t\n"
~"p re_fail_stack_t\n"
~"p re_match\n"
~"p re_match_2\n"
~"p re_match_context_t\n"
~"p re_max_failures\n"
~"p re_node_set\n"
~"p re_node_set_add_intersect\n"
~"p re_node_set_add_intersect.part\n"
~"p re_node_set_init_union\n"
~"p re_node_set_insert\n"
~"p re_node_set_merge\n"
~"p re_node_set_merge.part\n"
~"p re_pattern_buffer\n"
~"p re_registers\n"
~"p re_search\n"
~"p re_search_2\n"
~"p re_search_internal\n"
~"p re_search_stub\n"
~"p re_set_registers\n"
~"p re_set_syntax\n"
~"p re_sift_context_t\n"
~"p re_state_table_entry\n"
~"p re_string_context_at\n"
~"p re_string_reconstruct\n"
~"p re_string_t\n"
~"p re_sub_match_last_t\n"
~"p re_sub_match_top_t\n"
~"p re_syntax_options\n"
~"p re_token_t\n"
~"p re_token_type_t\n"
~"p read\n"
~"p read.c\n"
~"p read@plt\n"
~"p read_alias_file\n"
~"p readahead\n"
~"p readdir\n"
~"p readdir.c\n"
~"p readdir64\n"
~"p readdir64_r\n"
~"p readdir_r\n"
~"p readdir_result\n"
~"p readlink\n"
~"p readlinkat\n"
~"p readtcp\n"
~"p readunix\n"
~"p readv\n"
~"p realloc\n"
~"p realloc@plt\n"
~"p realloc_check\n"
~"p realloc_hook_ini\n"
~"p reallocarray\n"
~"p reallochook\n"
~"p realpath\n"
~"p realpath@@GLIBC_2.3\n"
~"p realpath@GLIBC_2.2.5\n"
~"p realpath_chk.c\n"
~"p reboot\n"
~"p reboot.c\n"
~"p rec_strm\n"
~"p receiver\n"
~"p receiver_fct\n"
~"p recv\n"
~"p recvfrom\n"
~"p recvmmsg\n"
~"p recvmmsg.c\n"
~"p recvmsg\n"
~"p ref_t\n"
~"p reg_errcode_t\n"
~"p reg_syntax_t\n"
~"p regcomp\n"
~"p regcomp.c\n"
~"p regerror\n"
~"p regex.c\n"
~"p regex.h\n"
~"p regex_internal.c\n"
~"p regex_internal.h\n"
~"p regex_t\n"
~"p regexec\n"
~"p regexec.c\n"
~"p regexec@@GLIBC_2.3.4\n"
~"p regexec@GLIBC_2.2.5\n"
~"p regexp.c\n"
~"p regfree\n"
~"p region\n"
~"p register_printf_function\n"
~"p register_printf_modifier\n"
~"p register_printf_specifier\n"
~"p register_printf_type\n"
~"p register_state\n"
~"p register_tm_clones\n"
~"p registerrpc\n"
~"p regmatch_t\n"
~"p regoff_t\n"
~"p reject_stat\n"
~"p rejected_reply\n"
~"p release_handle\n"
~"p release_libc_mem\n"
~"p reloc_result\n"
~"p relocate_args\n"
~"p relocate_doit\n"
~"p relocate_time\n"
~"p rem\n"
~"p remainder\n"
~"p remainderf\n"
~"p remainderf128\n"
~"p remainderf32\n"
~"p remainderf32x\n"
~"p remainderf64\n"
~"p remainderf64x\n"
~"p remainderl\n"
~"p remap_file_pages\n"
~"p remove\n"
~"p remove.c\n"
~"p remove_slotinfo\n"
~"p removexattr\n"
~"p remque\n"
~"p remquo\n"
~"p remquof\n"
~"p remquof128\n"
~"p remquof32\n"
~"p remquof32x\n"
~"p remquof64\n"
~"p remquof64x\n"
~"p remquol\n"
~"p rename\n"
~"p rename.c\n"
~"p renameat\n"
~"p renameat.c\n"
~"p rendezvous_request\n"
~"p rendezvous_stat\n"
~"p reply_body\n"
~"p reply_dscrm\n"
~"p reply_stat\n"
~"p request_header\n"
~"p request_type\n"
~"p res\n"
~"p res-close.c\n"
~"p res-state.c\n"
~"p res_hconf.c\n"
~"p res_hconf.h\n"
~"p res_init.c\n"
~"p res_libc.c\n"
~"p res_randomid.c\n"
~"p res_setoptions\n"
~"p res_state\n"
~"p res_state.h\n"
~"p res_thread_freeres\n"
~"p res_use_inet6.h\n"
~"p resbuf\n"
~"p resbuf.11084\n"
~"p resbuf.11085\n"
~"p resbuf.11121\n"
~"p resbuf.11123\n"
~"p resbuf.9861\n"
~"p resbuf.9945\n"
~"p resolv-internal.h\n"
~"p resolv.h\n"
~"p resolv_conf\n"
~"p resolv_conf.c\n"
~"p resolv_conf.h\n"
~"p resolv_conf_array\n"
~"p resolv_conf_global\n"
~"p resolv_conf_parser\n"
~"p resolv_context\n"
~"p resolv_context.c\n"
~"p resolv_context.h\n"
~"p resolv_sortlist_entry\n"
~"p resource.h\n"
~"p result\n"
~"p result_type\n"
~"p resultproc_t\n"
~"p revoke\n"
~"p rewind\n"
~"p rewind.c\n"
~"p rewinddir\n"
~"p rewinddir.c\n"
~"p rewrite_field.c\n"
~"p rexec\n"
~"p rexec.c\n"
~"p rexec_af\n"
~"p rexecoptions\n"
~"p re *** List may be truncated, max-completions reached. ***\n"
^done
~"\n\032\032frame-begin 0 0x555555555ac7\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555ac7",func="Solution4::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="130"}
main (argc=1, argv=0x7fffffffdc08) at solution.cpp:160
~"\n\032\032frame-begin 0 0x555555554b2d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b2d",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="160"}
Solution5::permute (this=0x7fffffffda1f, num=std::vector of length 0, capacity 4) at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b05\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b05",func="Solution5::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="135"}
~"\n\032\032frame-begin 0 0x555555555b14\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b14",func="Solution5::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="136"}
~"\n\032\032frame-begin 0 0x555555555b20\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b20",func="Solution5::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="137"}
~"\n\032\032frame-begin 0 0x555555555b46\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b46",func="Solution5::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="138"}
~"\n\032\032frame-begin 0 0x555555555b59\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b59",func="Solution5::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="139"}
~"\n\032\032frame-begin 0 0x555555555bb2\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555bb2",func="Solution5::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="142"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/a.out 

Breakpoint 1, main (argc=1, argv=0x7fffffffdc08) at solution.cpp:155
~"\n\032\032frame-begin 0 0x555555554a93\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a93",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="155"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a93",func="main(int, char**)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="155",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp:155"}]}
~"\n\032\032frame-begin 0 0x555555554ab3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ab3",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="156"}
~"\n\032\032frame-begin 0 0x555555554ad3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ad3",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="157"}
~"\n\032\032frame-begin 0 0x555555554af3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554af3",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="158"}
~"\n\032\032frame-begin 0 0x555555554b10\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554b10",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="159"}
Solution4::permute (this=0x7fffffffda1e, num=std::vector of length 0, capacity 4) at solution.cpp:116
~"\n\032\032frame-begin 0 0x5555555557c5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555557c5",func="Solution4::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="116"}
~"\n\032\032frame-begin 0 0x5555555557d4\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555557d4",func="Solution4::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="117"}
~"\n\032\032frame-begin 0 0x55555555584c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x000055555555584c",func="Solution4::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="118"}
std::vector<int, std::allocator<int> >::begin (this=0x7fffffffda20) at /usr/include/c++/7/bits/stl_vector.h:563
~"\n\032\032frame-begin 0 0x5555555561d4\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555561d4",func="std::vector<int, std::allocator<int> >::begin",file="/usr/include/c++/7/bits/stl_vector.h",fullname="/usr/include/c++/7/bits/stl_vector.h",line="563"}
~"\n\032\032frame-begin 0 0x5555555561e3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555561e3",func="std::vector<int, std::allocator<int> >::begin",file="/usr/include/c++/7/bits/stl_vector.h",fullname="/usr/include/c++/7/bits/stl_vector.h",line="564"}
Solution4::permute (this=0x7fffffffda1e, num=std::vector of length 0, capacity 4) at solution.cpp:129
~"\n\032\032frame-begin 0 0x555555555ac6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555ac6",func="Solution4::permute",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/046.Permutations/solution.cpp",line="129"}
