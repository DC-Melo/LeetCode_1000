
warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="55",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000ad4",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="69",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:69"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, main () at solution.cpp:71
~"\n\032\032frame-begin 0 0x555555554ad4\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ad4",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="71"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554ad4",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="69",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:69"}]}
__libc_start_main (main=0x555555554a1a <main()>, argc=1, argv=0x7fffffffdbd8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdbc8) at ../csu/libc-start.c:344
~"\n\032\032frame-begin 0 0x7ffff7464b97\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00007ffff7464b97",func="__libc_start_main",file="../csu/libc-start.c",fullname="/build/glibc-2ORdQG/glibc-2.27/csu/../csu/libc-start.c",line="344"}
&"disassemble /s\n"
~"Dump of assembler code for function __libc_start_main:\n"
~"../csu/libc-start.c:\n"
~"137\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464ab0 <+0>:\tpush   %r13\n"
~"   0x00007ffff7464ab2 <+2>:\tpush   %r12\n"
~"   0x00007ffff7464ab4 <+4>:\txor    %eax,%eax\n"
~"   0x00007ffff7464ab6 <+6>:\tpush   %rbp\n"
~"   0x00007ffff7464ab7 <+7>:\tpush   %rbx\n"
~"   0x00007ffff7464ab8 <+8>:\tmov    %rcx,%rbp\n"
~"   0x00007ffff7464abb <+11>:\tsub    $0x98,%rsp\n"
~"   0x00007ffff7464ac2 <+18>:\tmov    %rdx,0x8(%rsp)\n"
~"\n"
~"138\tin ../csu/libc-start.c\n"
~"139\tin ../csu/libc-start.c\n"
~"140\tin ../csu/libc-start.c\n"
~"141\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464ac7 <+23>:\tmov    0x3c946a(%rip),%rdx        # 0x7ffff782df38\n"
~"\n"
~"137\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464ace <+30>:\tmov    %rdi,0x18(%rsp)\n"
~"   0x00007ffff7464ad3 <+35>:\tmov    %esi,0x14(%rsp)\n"
~"\n"
~"138\tin ../csu/libc-start.c\n"
~"139\tin ../csu/libc-start.c\n"
~"140\tin ../csu/libc-start.c\n"
~"141\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464ad7 <+39>:\ttest   %rdx,%rdx\n"
~"   0x00007ffff7464ada <+42>:\tje     0x7ffff7464ae5 <__libc_start_main+53>\n"
~"   0x00007ffff7464adc <+44>:\tmov    (%rdx),%edx\n"
~"   0x00007ffff7464ade <+46>:\txor    %eax,%eax\n"
~"   0x00007ffff7464ae0 <+48>:\ttest   %edx,%edx\n"
~"   0x00007ffff7464ae2 <+50>:\tsete   %al\n"
~"\n"
~"142\tin ../csu/libc-start.c\n"
~"143\tin ../csu/libc-start.c\n"
~"144\tin ../csu/libc-start.c\n"
~"145\tin ../csu/libc-start.c\n"
~"146\tin ../csu/libc-start.c\n"
~"147\tin ../csu/libc-start.c\n"
~"148\tin ../csu/libc-start.c\n"
~"149\tin ../csu/libc-start.c\n"
~"150\tin ../csu/libc-start.c\n"
~"151\tin ../csu/libc-start.c\n"
~"152\tin ../csu/libc-start.c\n"
~"153\tin ../csu/libc-start.c\n"
~"154\tin ../csu/libc-start.c\n"
~"155\tin ../csu/libc-start.c\n"
~"156\tin ../csu/libc-start.c\n"
~"157\tin ../csu/libc-start.c\n"
~"158\tin ../csu/libc-start.c\n"
~"159\tin ../csu/libc-start.c\n"
~"160\tin ../csu/libc-start.c\n"
~"161\tin ../csu/libc-start.c\n"
~"162\tin ../csu/libc-start.c\n"
~"163\tin ../csu/libc-start.c\n"
~"164\tin ../csu/libc-start.c\n"
~"165\tin ../csu/libc-start.c\n"
~"166\tin ../csu/libc-start.c\n"
~"167\tin ../csu/libc-start.c\n"
~"168\tin ../csu/libc-start.c\n"
~"169\tin ../csu/libc-start.c\n"
~"170\tin ../csu/libc-start.c\n"
~"171\tin ../csu/libc-start.c\n"
~"172\tin ../csu/libc-start.c\n"
~"173\tin ../csu/libc-start.c\n"
~"174\tin ../csu/libc-start.c\n"
~"175\tin ../csu/libc-start.c\n"
~"176\tin ../csu/libc-start.c\n"
~"177\tin ../csu/libc-start.c\n"
~"178\tin ../csu/libc-start.c\n"
~"179\tin ../csu/libc-start.c\n"
~"180\tin ../csu/libc-start.c\n"
~"181\tin ../csu/libc-start.c\n"
~"182\tin ../csu/libc-start.c\n"
~"183\tin ../csu/libc-start.c\n"
~"184\tin ../csu/libc-start.c\n"
~"185\tin ../csu/libc-start.c\n"
~"186\tin ../csu/libc-start.c\n"
~"187\tin ../csu/libc-start.c\n"
~"188\tin ../csu/libc-start.c\n"
~"189\tin ../csu/libc-start.c\n"
~"190\tin ../csu/libc-start.c\n"
~"191\tin ../csu/libc-start.c\n"
~"192\tin ../csu/libc-start.c\n"
~"193\tin ../csu/libc-start.c\n"
~"194\tin ../csu/libc-start.c\n"
~"195\tin ../csu/libc-start.c\n"
~"196\tin ../csu/libc-start.c\n"
~"197\tin ../csu/libc-start.c\n"
~"198\tin ../csu/libc-start.c\n"
~"199\tin ../csu/libc-start.c\n"
~"200\tin ../csu/libc-start.c\n"
~"201\tin ../csu/libc-start.c\n"
~"202\tin ../csu/libc-start.c\n"
~"203\tin ../csu/libc-start.c\n"
~"204\tin ../csu/libc-start.c\n"
~"205\tin ../csu/libc-start.c\n"
~"206\tin ../csu/libc-start.c\n"
~"207\tin ../csu/libc-start.c\n"
~"208\tin ../csu/libc-start.c\n"
~"209\tin ../csu/libc-start.c\n"
~"210\tin ../csu/libc-start.c\n"
~"211\tin ../csu/libc-start.c\n"
~"212\tin ../csu/libc-start.c\n"
~"213\tin ../csu/libc-start.c\n"
~"214\tin ../csu/libc-start.c\n"
~"215\tin ../csu/libc-start.c\n"
~"216\tin ../csu/libc-start.c\n"
~"217\tin ../csu/libc-start.c\n"
~"218\tin ../csu/libc-start.c\n"
~"219\tin ../csu/libc-start.c\n"
~"220\tin ../csu/libc-start.c\n"
~"221\tin ../csu/libc-start.c\n"
~"222\tin ../csu/libc-start.c\n"
~"223\tin ../csu/libc-start.c\n"
~"224\tin ../csu/libc-start.c\n"
~"225\tin ../csu/libc-start.c\n"
~"226\tin ../csu/libc-start.c\n"
~"227\tin ../csu/libc-start.c\n"
~"228\tin ../csu/libc-start.c\n"
~"229\tin ../csu/libc-start.c\n"
~"230\tin ../csu/libc-start.c\n"
~"231\tin ../csu/libc-start.c\n"
~"232\tin ../csu/libc-start.c\n"
~"233\tin ../csu/libc-start.c\n"
~"234\tin ../csu/libc-start.c\n"
~"235\tin ../csu/libc-start.c\n"
~"236\tin ../csu/libc-start.c\n"
~"237\tin ../csu/libc-start.c\n"
~"238\tin ../csu/libc-start.c\n"
~"239\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464ae5 <+53>:\ttest   %r9,%r9\n"
~"\n"
~"141\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464ae8 <+56>:\tmov    %eax,0x3c96b2(%rip)        # 0x7ffff782e1a0 <__libc_multiple_libcs>\n"
~"\n"
~"142\tin ../csu/libc-start.c\n"
~"143\tin ../csu/libc-start.c\n"
~"144\tin ../csu/libc-start.c\n"
~"145\tin ../csu/libc-start.c\n"
~"146\tin ../csu/libc-start.c\n"
~"147\tin ../csu/libc-start.c\n"
~"148\tin ../csu/libc-start.c\n"
~"149\tin ../csu/libc-start.c\n"
~"150\tin ../csu/libc-start.c\n"
~"151\tin ../csu/libc-start.c\n"
~"152\tin ../csu/libc-start.c\n"
~"153\tin ../csu/libc-start.c\n"
~"154\tin ../csu/libc-start.c\n"
~"155\tin ../csu/libc-start.c\n"
~"156\tin ../csu/libc-start.c\n"
~"157\tin ../csu/libc-start.c\n"
~"158\tin ../csu/libc-start.c\n"
~"159\tin ../csu/libc-start.c\n"
~"160\tin ../csu/libc-start.c\n"
~"161\tin ../csu/libc-start.c\n"
~"162\tin ../csu/libc-start.c\n"
~"163\tin ../csu/libc-start.c\n"
~"164\tin ../csu/libc-start.c\n"
~"165\tin ../csu/libc-start.c\n"
~"166\tin ../csu/libc-start.c\n"
~"167\tin ../csu/libc-start.c\n"
~"168\tin ../csu/libc-start.c\n"
~"169\tin ../csu/libc-start.c\n"
~"170\tin ../csu/libc-start.c\n"
~"171\tin ../csu/libc-start.c\n"
~"172\tin ../csu/libc-start.c\n"
~"173\tin ../csu/libc-start.c\n"
~"174\tin ../csu/libc-start.c\n"
~"175\tin ../csu/libc-start.c\n"
~"176\tin ../csu/libc-start.c\n"
~"177\tin ../csu/libc-start.c\n"
~"178\tin ../csu/libc-start.c\n"
~"179\tin ../csu/libc-start.c\n"
~"180\tin ../csu/libc-start.c\n"
~"181\tin ../csu/libc-start.c\n"
~"182\tin ../csu/libc-start.c\n"
~"183\tin ../csu/libc-start.c\n"
~"184\tin ../csu/libc-start.c\n"
~"185\tin ../csu/libc-start.c\n"
~"186\tin ../csu/libc-start.c\n"
~"187\tin ../csu/libc-start.c\n"
~"188\tin ../csu/libc-start.c\n"
~"189\tin ../csu/libc-start.c\n"
~"190\tin ../csu/libc-start.c\n"
~"191\tin ../csu/libc-start.c\n"
~"192\tin ../csu/libc-start.c\n"
~"193\tin ../csu/libc-start.c\n"
~"194\tin ../csu/libc-start.c\n"
~"195\tin ../csu/libc-start.c\n"
~"196\tin ../csu/libc-start.c\n"
~"197\tin ../csu/libc-start.c\n"
~"198\tin ../csu/libc-start.c\n"
~"199\tin ../csu/libc-start.c\n"
~"200\tin ../csu/libc-start.c\n"
~"201\tin ../csu/libc-start.c\n"
~"202\tin ../csu/libc-start.c\n"
~"203\tin ../csu/libc-start.c\n"
~"204\tin ../csu/libc-start.c\n"
~"205\tin ../csu/libc-start.c\n"
~"206\tin ../csu/libc-start.c\n"
~"207\tin ../csu/libc-start.c\n"
~"208\tin ../csu/libc-start.c\n"
~"209\tin ../csu/libc-start.c\n"
~"210\tin ../csu/libc-start.c\n"
~"211\tin ../csu/libc-start.c\n"
~"212\tin ../csu/libc-start.c\n"
~"213\tin ../csu/libc-start.c\n"
~"214\tin ../csu/libc-start.c\n"
~"215\tin ../csu/libc-start.c\n"
~"216\tin ../csu/libc-start.c\n"
~"217\tin ../csu/libc-start.c\n"
~"218\tin ../csu/libc-start.c\n"
~"219\tin ../csu/libc-start.c\n"
~"220\tin ../csu/libc-start.c\n"
~"221\tin ../csu/libc-start.c\n"
~"222\tin ../csu/libc-start.c\n"
~"223\tin ../csu/libc-start.c\n"
~"224\tin ../csu/libc-start.c\n"
~"225\tin ../csu/libc-start.c\n"
~"226\tin ../csu/libc-start.c\n"
~"227\tin ../csu/libc-start.c\n"
~"228\tin ../csu/libc-start.c\n"
~"229\tin ../csu/libc-start.c\n"
~"230\tin ../csu/libc-start.c\n"
~"231\tin ../csu/libc-start.c\n"
~"232\tin ../csu/libc-start.c\n"
~"233\tin ../csu/libc-start.c\n"
~"234\tin ../csu/libc-start.c\n"
~"235\tin ../csu/libc-start.c\n"
~"236\tin ../csu/libc-start.c\n"
~"237\tin ../csu/libc-start.c\n"
~"238\tin ../csu/libc-start.c\n"
~"239\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464aee <+62>:\tje     0x7ffff7464afc <__libc_start_main+76>\n"
~"\n"
~"240\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464af0 <+64>:\txor    %edx,%edx\n"
~"   0x00007ffff7464af2 <+66>:\txor    %esi,%esi\n"
~"   0x00007ffff7464af4 <+68>:\tmov    %r9,%rdi\n"
~"   0x00007ffff7464af7 <+71>:\tcallq  0x7ffff74864e0 <__GI___cxa_atexit>\n"
~"\n"
~"241\tin ../csu/libc-start.c\n"
~"242\tin ../csu/libc-start.c\n"
~"243\tin ../csu/libc-start.c\n"
~"244\tin ../csu/libc-start.c\n"
~"245\tin ../csu/libc-start.c\n"
~"246\tin ../csu/libc-start.c\n"
~"247\tin ../csu/libc-start.c\n"
~"248\tin ../csu/libc-start.c\n"
~"249\tin ../csu/libc-start.c\n"
~"250\tin ../csu/libc-start.c\n"
~"251\tin ../csu/libc-start.c\n"
~"252\tin ../csu/libc-start.c\n"
~"253\tin ../csu/libc-start.c\n"
~"254\tin ../csu/libc-start.c\n"
~"255\tin ../csu/libc-start.c\n"
~"256\tin ../csu/libc-start.c\n"
~"257\tin ../csu/libc-start.c\n"
~"258\tin ../csu/libc-start.c\n"
~"259\tin ../csu/libc-start.c\n"
~"260\tin ../csu/libc-start.c\n"
~"261\tin ../csu/libc-start.c\n"
~"262\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464afc <+76>:\tmov    0x3c9355(%rip),%rdx        # 0x7ffff782de58\n"
~"   0x00007ffff7464b03 <+83>:\tmov    (%rdx),%ebx\n"
~"   0x00007ffff7464b05 <+85>:\tand    $0x2,%ebx\n"
~"   0x00007ffff7464b08 <+88>:\tjne    0x7ffff7464be8 <__libc_start_main+312>\n"
~"\n"
~"264\tin ../csu/libc-start.c\n"
~"265\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b0e <+94>:\ttest   %rbp,%rbp\n"
~"   0x00007ffff7464b11 <+97>:\tje     0x7ffff7464b28 <__libc_start_main+120>\n"
~"\n"
~"266\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b13 <+99>:\tmov    0x3c938e(%rip),%rax        # 0x7ffff782dea8\n"
~"   0x00007ffff7464b1a <+106>:\tmov    0x8(%rsp),%rsi\n"
~"   0x00007ffff7464b1f <+111>:\tmov    0x14(%rsp),%edi\n"
~"   0x00007ffff7464b23 <+115>:\tmov    (%rax),%rdx\n"
~"   0x00007ffff7464b26 <+118>:\tcallq  *%rbp\n"
~"\n"
~"267\tin ../csu/libc-start.c\n"
~"268\tin ../csu/libc-start.c\n"
~"269\tin ../csu/libc-start.c\n"
~"270\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b28 <+120>:\tmov    0x3c9329(%rip),%rdx        # 0x7ffff782de58\n"
~"   0x00007ffff7464b2f <+127>:\tmov    0x1b0(%rdx),%eax\n"
~"   0x00007ffff7464b35 <+133>:\ttest   %eax,%eax\n"
~"   0x00007ffff7464b37 <+135>:\tjne    0x7ffff7464c08 <__libc_start_main+344>\n"
~"\n"
~"280\tin ../csu/libc-start.c\n"
~"281\tin ../csu/libc-start.c\n"
~"282\tin ../csu/libc-start.c\n"
~"283\tin ../csu/libc-start.c\n"
~"284\tin ../csu/libc-start.c\n"
~"285\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b3d <+141>:\ttest   %ebx,%ebx\n"
~"   0x00007ffff7464b3f <+143>:\tjne    0x7ffff7464c4b <__libc_start_main+411>\n"
~"\n"
~"287\tin ../csu/libc-start.c\n"
~"288\tin ../csu/libc-start.c\n"
~"289\tin ../csu/libc-start.c\n"
~"290\tin ../csu/libc-start.c\n"
~"291\tin ../csu/libc-start.c\n"
~"292\tin ../csu/libc-start.c\n"
~"293\tin ../csu/libc-start.c\n"
~"294\tin ../csu/libc-start.c\n"
~"295\tin ../csu/libc-start.c\n"
~"296\tin ../csu/libc-start.c\n"
~"297\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b45 <+149>:\tlea    0x20(%rsp),%rdi\n"
~"   0x00007ffff7464b4a <+154>:\tcallq  0x7ffff7481cc0 <_setjmp>\n"
~"\n"
~"298\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b4f <+159>:\ttest   %eax,%eax\n"
~"   0x00007ffff7464b51 <+161>:\tjne    0x7ffff7464b9e <__libc_start_main+238>\n"
~"\n"
~"299\tin ../csu/libc-start.c\n"
~"300\tin ../csu/libc-start.c\n"
~"301\tin ../csu/libc-start.c\n"
~"302\tin ../csu/libc-start.c\n"
~"303\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b53 <+163>:\tmov    %fs:0x300,%rax\n"
~"   0x00007ffff7464b5c <+172>:\tmov    %rax,0x68(%rsp)\n"
~"\n"
~"304\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b61 <+177>:\tmov    %fs:0x2f8,%rax\n"
~"   0x00007ffff7464b6a <+186>:\tmov    %rax,0x70(%rsp)\n"
~"\n"
~"305\tin ../csu/libc-start.c\n"
~"306\tin ../csu/libc-start.c\n"
~"307\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b6f <+191>:\tlea    0x20(%rsp),%rax\n"
~"   0x00007ffff7464b74 <+196>:\tmov    %rax,%fs:0x300\n"
~"\n"
~"308\tin ../csu/libc-start.c\n"
~"309\tin ../csu/libc-start.c\n"
~"310\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b7d <+205>:\tmov    0x3c9324(%rip),%rax        # 0x7ffff782dea8\n"
~"   0x00007ffff7464b84 <+212>:\tmov    0x8(%rsp),%rsi\n"
~"   0x00007ffff7464b89 <+217>:\tmov    0x14(%rsp),%edi\n"
~"   0x00007ffff7464b8d <+221>:\tmov    (%rax),%rdx\n"
~"   0x00007ffff7464b90 <+224>:\tmov    0x18(%rsp),%rax\n"
~"   0x00007ffff7464b95 <+229>:\tcallq  *%rax\n"
~"\n"
~"336\tin ../csu/libc-start.c\n"
~"337\tin ../csu/libc-start.c\n"
~"338\tin ../csu/libc-start.c\n"
~"339\tin ../csu/libc-start.c\n"
~"340\tin ../csu/libc-start.c\n"
~"341\tin ../csu/libc-start.c\n"
~"342\tin ../csu/libc-start.c\n"
~"343\tin ../csu/libc-start.c\n"
~"344\tin ../csu/libc-start.c\n"
~"=> 0x00007ffff7464b97 <+231>:\tmov    %eax,%edi\n"
~"   0x00007ffff7464b99 <+233>:\tcallq  0x7ffff74861d0 <__GI_exit>\n"
~"\n"
~"316\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464b9e <+238>:\tmov    0x3ced23(%rip),%rax        # 0x7ffff78338c8 <__libc_pthread_functions+392>\n"
~"   0x00007ffff7464ba5 <+245>:\tror    $0x11,%rax\n"
~"   0x00007ffff7464ba9 <+249>:\txor    %fs:0x30,%rax\n"
~"   0x00007ffff7464bb2 <+258>:\tcallq  *%rax\n"
~"\n"
~"325\tin ../csu/libc-start.c\n"
~"326\tin ../csu/libc-start.c\n"
~"327\tin ../csu/libc-start.c\n"
~"328\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464bb4 <+260>:\tmov    0x3cecfd(%rip),%rax        # 0x7ffff78338b8 <__libc_pthread_functions+376>\n"
~"   0x00007ffff7464bbb <+267>:\tror    $0x11,%rax\n"
~"   0x00007ffff7464bbf <+271>:\txor    %fs:0x30,%rax\n"
~"\n"
~"329\tin ../csu/libc-start.c\n"
~"330\tin ../csu/libc-start.c\n"
~"331\tin ../csu/libc-start.c\n"
~"332\tin ../csu/libc-start.c\n"
~"333\tin ../csu/libc-start.c\n"
~"334\tin ../csu/libc-start.c\n"
~"335\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464bc8 <+280>:\tlock decl (%rax)\n"
~"   0x00007ffff7464bcb <+283>:\tsete   %dl\n"
~"   0x00007ffff7464bce <+286>:\ttest   %dl,%dl\n"
~"   0x00007ffff7464bd0 <+288>:\tjne    0x7ffff7464c04 <__libc_start_main+340>\n"
~"\n"
~"../sysdeps/unix/sysv/linux/exit-thread.h:\n"
&"36\t../sysdeps/unix/sysv/linux/exit-thread.h: No such file or directory.\n"
~"   0x00007ffff7464bd2 <+290>:\tmov    $0x3c,%edx\n"
~"   0x00007ffff7464bd7 <+295>:\tnopw   0x0(%rax,%rax,1)\n"
~"   0x00007ffff7464be0 <+304>:\txor    %edi,%edi\n"
~"   0x00007ffff7464be2 <+306>:\tmov    %edx,%eax\n"
~"   0x00007ffff7464be4 <+308>:\tsyscall \n"
~"   0x00007ffff7464be6 <+310>:\tjmp    0x7ffff7464be0 <__libc_start_main+304>\n"
~"\n"
~"../csu/libc-start.c:\n"
&"263\t../csu/libc-start.c: No such file or directory.\n"
~"   0x00007ffff7464be8 <+312>:\tmov    0x8(%rsp),%rax\n"
~"   0x00007ffff7464bed <+317>:\tlea    0x191e01(%rip),%rdi        # 0x7ffff75f69f5\n"
~"   0x00007ffff7464bf4 <+324>:\tmov    (%rax),%rsi\n"
~"   0x00007ffff7464bf7 <+327>:\txor    %eax,%eax\n"
~"   0x00007ffff7464bf9 <+329>:\tcallq  *0x168(%rdx)\n"
~"   0x00007ffff7464bff <+335>:\tjmpq   0x7ffff7464b0e <__libc_start_main+94>\n"
~"\n"
~"317\tin ../csu/libc-start.c\n"
~"318\tin ../csu/libc-start.c\n"
~"319\tin ../csu/libc-start.c\n"
~"320\tin ../csu/libc-start.c\n"
~"321\tin ../csu/libc-start.c\n"
~"322\tin ../csu/libc-start.c\n"
~"323\tin ../csu/libc-start.c\n"
~"324\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464c04 <+340>:\txor    %eax,%eax\n"
~"   0x00007ffff7464c06 <+342>:\tjmp    0x7ffff7464b97 <__libc_start_main+231>\n"
~"\n"
~"272\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464c08 <+344>:\tmov    0x1a8(%rdx),%r13\n"
~"\n"
~"273\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464c0f <+351>:\tmov    0x3c91d2(%rip),%rdx        # 0x7ffff782dde8\n"
~"   0x00007ffff7464c16 <+358>:\tmov    %eax,%ebp\n"
~"   0x00007ffff7464c18 <+360>:\tshl    $0x4,%rbp\n"
~"   0x00007ffff7464c1c <+364>:\tmov    (%rdx),%r12\n"
~"   0x00007ffff7464c1f <+367>:\tadd    $0x470,%r12\n"
~"   0x00007ffff7464c26 <+374>:\tadd    %r12,%rbp\n"
~"\n"
~"274\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464c29 <+377>:\tjmp    0x7ffff7464c41 <__libc_start_main+401>\n"
~"\n"
~"275\tin ../csu/libc-start.c\n"
~"276\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464c2b <+379>:\tmov    0x18(%r13),%rax\n"
~"   0x00007ffff7464c2f <+383>:\ttest   %rax,%rax\n"
~"   0x00007ffff7464c32 <+386>:\tje     0x7ffff7464c39 <__libc_start_main+393>\n"
~"\n"
~"277\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464c34 <+388>:\tmov    %r12,%rdi\n"
~"   0x00007ffff7464c37 <+391>:\tcallq  *%rax\n"
~"\n"
~"278\tin ../csu/libc-start.c\n"
~"279\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464c39 <+393>:\tmov    0x40(%r13),%r13\n"
~"   0x00007ffff7464c3d <+397>:\tadd    $0x10,%r12\n"
~"\n"
~"274\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464c41 <+401>:\tcmp    %rbp,%r12\n"
~"   0x00007ffff7464c44 <+404>:\tjne    0x7ffff7464c2b <__libc_start_main+379>\n"
~"   0x00007ffff7464c46 <+406>:\tjmpq   0x7ffff7464b3d <__libc_start_main+141>\n"
~"\n"
~"286\tin ../csu/libc-start.c\n"
~"   0x00007ffff7464c4b <+411>:\tmov    0x8(%rsp),%rax\n"
~"   0x00007ffff7464c50 <+416>:\tmov    0x3c9201(%rip),%rdx        # 0x7ffff782de58\n"
~"   0x00007ffff7464c57 <+423>:\tlea    0x191db1(%rip),%rdi        # 0x7ffff75f6a0f\n"
~"   0x00007ffff7464c5e <+430>:\tmov    (%rax),%rsi\n"
~"   0x00007ffff7464c61 <+433>:\txor    %eax,%eax\n"
~"   0x00007ffff7464c63 <+435>:\tcallq  *0x168(%rdx)\n"
~"   0x00007ffff7464c69 <+441>:\tjmpq   0x7ffff7464b45 <__libc_start_main+149>\n"
~"End of assembler dump.\n"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, main () at solution.cpp:71
~"\n\032\032frame-begin 0 0x555555554ad4\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ad4",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="71"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554ad4",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="69",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:69"}]}
__libc_start_main (main=0x555555554a1a <main()>, argc=1, argv=0x7fffffffdbd8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdbc8) at ../csu/libc-start.c:344
~"\n\032\032frame-begin 0 0x7ffff7464b97\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00007ffff7464b97",func="__libc_start_main",file="../csu/libc-start.c",fullname="/build/glibc-2ORdQG/glibc-2.27/csu/../csu/libc-start.c",line="344"}
__GI_exit (status=0) at exit.c:139
~"\n\032\032frame-begin 0 0x7ffff74861d0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00007ffff74861d0",func="__GI_exit",file="exit.c",fullname="/build/glibc-2ORdQG/glibc-2.27/stdlib/exit.c",line="139"}
&"disassemble /s\n"
~"Dump of assembler code for function __GI_exit:\n"
~"exit.c:\n"
~"138\tin exit.c\n"
~"139\tin exit.c\n"
~"=> 0x00007ffff74861d0 <+0>:\tlea    0x3a8541(%rip),%rsi        # 0x7ffff782e718 <__exit_funcs>\n"
~"\n"
~"138\tin exit.c\n"
~"   0x00007ffff74861d7 <+7>:\tsub    $0x8,%rsp\n"
~"\n"
~"139\tin exit.c\n"
~"   0x00007ffff74861db <+11>:\tmov    $0x1,%ecx\n"
~"   0x00007ffff74861e0 <+16>:\tmov    $0x1,%edx\n"
~"   0x00007ffff74861e5 <+21>:\tcallq  0x7ffff7485f80 <__run_exit_handlers>\n"
~"End of assembler dump.\n"
^done
138	in exit.c
~"\n\032\032frame-begin 0 0x7ffff74861d7\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00007ffff74861d7",func="__GI_exit",file="exit.c",fullname="/build/glibc-2ORdQG/glibc-2.27/stdlib/exit.c",line="138"}

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="55",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:68"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, main () at solution.cpp:68
~"\n\032\032frame-begin 0 0x555555554a96\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a96",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:68"}]}
Solution::combinationSum (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, target=7) at solution.cpp:29
~"\n\032\032frame-begin 0 0x555555554ba6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ba6",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="29"}
~"\n\032\032frame-begin 0 0x555555554bb5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bb5",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="31"}
~"\n\032\032frame-begin 0 0x555555554bc1\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bc1",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="33"}
&"complete pvect\n"
~"pvector\n"
^done
&"complete pvector m_vecR\n"
~"pvector m_vecRet\n"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, main () at solution.cpp:68
~"\n\032\032frame-begin 0 0x555555554a96\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a96",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:68"}]}
Solution::combinationSum (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, target=7) at solution.cpp:29
~"\n\032\032frame-begin 0 0x555555554ba6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ba6",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="29"}
~"\n\032\032frame-begin 0 0x555555554bb5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bb5",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="31"}
&"complete pvec\n"
~"pvector\n"
^done
&"complete pvector can\n"
~"pvector cancel_handler\n"
~"pvector cancel_handler.constprop\n"
~"pvector candidates\n"
~"pvector canonicalize\n"
~"pvector canonicalize_file_name\n"
~"pvector canonicalizef\n"
~"pvector canonicalizef128\n"
~"pvector canonicalizef32\n"
~"pvector canonicalizef32x\n"
~"pvector canonicalizef64\n"
~"pvector canonicalizef64x\n"
~"pvector canonicalizel\n"
^done
&"complete pvector candi\n"
~"pvector candidates\n"
^done
~"\n\032\032frame-begin 0 0x555555554bc1\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bc1",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="33"}
~"\n\032\032frame-begin 0 0x555555554bcd\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bcd",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="34"}
~"\n\032\032frame-begin 0 0x555555554bf3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bf3",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="35"}
&"complete p candidat\n"
~"p candidates\n"
^done
&"complete p candidates.b\n"
~"p candidates.back\n"
~"p candidates.begin\n"
^done
~"\n\032\032frame-begin 0 0x555555554bf3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bf3",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="35"}
~"\n\032\032frame-begin 0 0x555555554bf3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bf3",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="35"}
~"\n\032\032frame-begin 0 0x555555554bf3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bf3",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:68"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555554bf3:\tmov    -0x4c(%rbp),%ecx\n"
~"   0x555555554bf6:\tlea    -0x30(%rbp),%rdx\n"
~"   0x555555554bfa:\tmov    -0x48(%rbp),%rsi\n"
~"   0x555555554bfe:\tmov    -0x40(%rbp),%rax\n"
~"   0x555555554c02:\tmov    %ecx,%r8d\n"
~"   0x555555554c05:\tmov    %rdx,%rcx\n"
~"   0x555555554c08:\tmov    $0x0,%edx\n"
~"   0x555555554c0d:\tmov    %rax,%rdi\n"
~"   0x555555554c10:\tcallq  0x555555554c72\n"
~"   0x555555554c15:\tmov    -0x40(%rbp),%rdx\n"
~"   0x555555554c19:\tmov    -0x38(%rbp),%rax\n"
~"   0x555555554c1d:\tmov    %rdx,%rsi\n"
~"   0x555555554c20:\tmov    %rax,%rdi\n"
~"   0x555555554c23:\tcallq  0x555555554f12\n"
~"   0x555555554c28:\tnop\n"
~"   0x555555554c29:\tlea    -0x30(%rbp),%rax\n"
~"   0x555555554c2d:\tmov    %rax,%rdi\n"
~"   0x555555554c30:\tcallq  0x555555554db8\n"
~"   0x555555554c35:\tnop\n"
~"   0x555555554c36:\tmov    -0x38(%rbp),%rax\n"
~"   0x555555554c3a:\tmov    -0x18(%rbp),%rcx\n"
~"   0x555555554c3e:\txor    %fs:0x28,%rcx\n"
~"   0x555555554c47:\tje     0x555555554c6a\n"
~"   0x555555554c49:\tjmp    0x555555554c65\n"
~"   0x555555554c4b:\tmov    %rax,%rbx\n"
~"   0x555555554c4e:\tlea    -0x30(%rbp),%rax\n"
~"   0x555555554c52:\tmov    %rax,%rdi\n"
~"   0x555555554c55:\tcallq  0x555555554db8\n"
~"   0x555555554c5a:\tmov    %rbx,%rax\n"
~"   0x555555554c5d:\tmov    %rax,%rdi\n"
~"   0x555555554c60:\tcallq  0x5555555548f0\n"
~"   0x555555554c65:\tcallq  0x5555555548b0\n"
~"   0x555555554c6a:\tadd    $0x48,%rsp\n"
~"   0x555555554c6e:\tpop    %rbx\n"
~"   0x555555554c6f:\tpop    %rbp\n"
~"   0x555555554c70:\tretq   \n"
~"   0x555555554c71:\tnop\n"
~"   0x555555554c72:\tpush   %rbp\n"
~"   0x555555554c73:\tmov    %rsp,%rbp\n"
~"   0x555555554c76:\tsub    $0x40,%rsp\n"
~"   0x555555554c7a:\tmov    %rdi,-0x18(%rbp)\n"
~"   0x555555554c7e:\tmov    %rsi,-0x20(%rbp)\n"
~"   0x555555554c82:\tmov    %rdx,-0x28(%rbp)\n"
~"   0x555555554c86:\tmov    %rcx,-0x30(%rbp)\n"
~"   0x555555554c8a:\tmov    %r8d,-0x34(%rbp)\n"
~"   0x555555554c8e:\tcmpl   $0x0,-0x34(%rbp)\n"
~"   0x555555554c92:\tjne    0x555555554cac\n"
~"   0x555555554c94:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555554c98:\tmov    -0x30(%rbp),%rdx\n"
~"   0x555555554c9c:\tmov    %rdx,%rsi\n"
~"   0x555555554c9f:\tmov    %rax,%rdi\n"
~"   0x555555554ca2:\tcallq  0x55555555506c\n"
~"   0x555555554ca7:\tjmpq   0x555555554d60\n"
~"   0x555555554cac:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555554cb0:\tmov    %rax,-0x8(%rbp)\n"
~"   0x555555554cb4:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555554cb8:\tmov    %rax,%rdi\n"
~"   0x555555554cbb:\tcallq  0x5555555550e8\n"
~"   0x555555554cc0:\tcmp    %rax,-0x8(%rbp)\n"
~"   0x555555554cc4:\tsetb   %al\n"
~"   0x555555554cc7:\ttest   %al,%al\n"
~"   0x555555554cc9:\tje     0x555555554d60\n"
~"   0x555555554ccf:\tmov    -0x8(%rbp),%rdx\n"
~"   0x555555554cd3:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555554cd7:\tmov    %rdx,%rsi\n"
~"   0x555555554cda:\tmov    %rax,%rdi\n"
~"   0x555555554cdd:\tcallq  0x55555555510e\n"
~"   0x555555554ce2:\tmov    (%rax),%eax\n"
~"   0x555555554ce4:\tcmp    %eax,-0x34(%rbp)\n"
~"   0x555555554ce7:\tsetge  %al\n"
~"   0x555555554cea:\ttest   %al,%al\n"
~"   0x555555554cec:\tje     0x555555554d56\n"
~"   0x555555554cee:\tmov    -0x8(%rbp),%rdx\n"
~"   0x555555554cf2:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555554cf6:\tmov    %rdx,%rsi\n"
~"   0x555555554cf9:\tmov    %rax,%rdi\n"
~"   0x555555554cfc:\tcallq  0x55555555510e\n"
~"   0x555555554d01:\tmov    %rax,%rdx\n"
~"   0x555555554d04:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554d08:\tmov    %rdx,%rsi\n"
~"   0x555555554d0b:\tmov    %rax,%rdi\n"
~"   0x555555554d0e:\tcallq  0x55555555512e\n"
~"   0x555555554d13:\tmov    -0x8(%rbp),%rdx\n"
~"   0x555555554d17:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555554d1b:\tmov    %rdx,%rsi\n"
~"   0x555555554d1e:\tmov    %rax,%rdi\n"
~"   0x555555554d21:\tcallq  0x55555555510e\n"
~"   0x555555554d26:\tmov    (%rax),%eax\n"
~"   0x555555554d28:\tmov    -0x34(%rbp),%edx\n"
~"   0x555555554d2b:\tmov    %edx,%edi\n"
~"   0x555555554d2d:\tsub    %eax,%edi\n"
~"   0x555555554d2f:\tmov    -0x30(%rbp),%rcx\n"
~"   0x555555554d33:\tmov    -0x8(%rbp),%rdx\n"
~"   0x555555554d37:\tmov    -0x20(%rbp),%rsi\n"
~"   0x555555554d3b:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555554d3f:\tmov    %edi,%r8d\n"
~"   0x555555554d42:\tmov    %rax,%rdi\n"
~"   0x555555554d45:\tcallq  0x555555554c72\n"
~"   0x555555554d4a:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554d4e:\tmov    %rax,%rdi\n"
^done
~"\n\032\032frame-begin 0 0x555555554bf3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bf3",func="??"}
~"\n\032\032frame-begin 0 0x555555554bf3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bf3",func="??"}
50	            {
51	                if (target >= candidates[i])
52	                {
53	                    curr.push_back(candidates[i]);
54	                    combination(candidates, i, curr, target - candidates[i]);
55	                    curr.pop_back();
56	                }
57	            }
58	        }
59	    }

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="55",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="0",original-location="solution.cpp:68"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, main () at solution.cpp:68
~"\n\032\032frame-begin 0 0x555555554a96\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a96",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="1",original-location="solution.cpp:68"}]}
Solution::combinationSum (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, target=7) at solution.cpp:29
~"\n\032\032frame-begin 0 0x555555554ba6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ba6",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="29"}
~"\n\032\032frame-begin 0 0x555555554bb5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bb5",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="31"}
~"\n\032\032frame-begin 0 0x555555554bc1\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bc1",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="33"}
~"\n\032\032frame-begin 0 0x555555554bcd\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bcd",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="34"}
&"complete p candi\n"
~"p candidates\n"
^done
&"complete pve\n"
~"pvector\n"
^done
&"complete pvector can\n"
~"pvector cancel_handler\n"
~"pvector cancel_handler.constprop\n"
~"pvector candidates\n"
~"pvector canonicalize\n"
~"pvector canonicalize_file_name\n"
~"pvector canonicalizef\n"
~"pvector canonicalizef128\n"
~"pvector canonicalizef32\n"
~"pvector canonicalizef32x\n"
~"pvector canonicalizef64\n"
~"pvector canonicalizef64x\n"
~"pvector canonicalizel\n"
^done
&"complete pvector candi\n"
~"pvector candidates\n"
^done
~"\n\032\032frame-begin 0 0x555555554bf3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bf3",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="35"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, main () at solution.cpp:68
~"\n\032\032frame-begin 0 0x555555554a96\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a96",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="1",original-location="solution.cpp:68"}]}
Solution::combinationSum (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, target=7) at solution.cpp:29
~"\n\032\032frame-begin 0 0x555555554ba6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ba6",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="29"}
~"\n\032\032frame-begin 0 0x555555554bb5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bb5",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="31"}
~"\n\032\032frame-begin 0 0x555555554bc1\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bc1",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="33"}
~"\n\032\032frame-begin 0 0x555555554bcd\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bcd",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="34"}
std::vector<int, std::allocator<int> >::end (this=0x7fffffffda90) at /usr/include/c++/7/bits/stl_vector.h:581
~"\n\032\032frame-begin 0 0x555555554e76\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e76",func="std::vector<int, std::allocator<int> >::end",file="/usr/include/c++/7/bits/stl_vector.h",fullname="/usr/include/c++/7/bits/stl_vector.h",line="581"}
~"\n\032\032frame-begin 0 0x555555554e85\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554e85",func="std::vector<int, std::allocator<int> >::end",file="/usr/include/c++/7/bits/stl_vector.h",fullname="/usr/include/c++/7/bits/stl_vector.h",line="582"}
__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator (this=0x7fffffffd9e0, __i=@0x7fffffffda98: 0x55555576ee80) at /usr/include/c++/7/bits/stl_iterator.h:783
~"\n\032\032frame-begin 0 0x55555555544c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x000055555555544c",func="__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator",file="/usr/include/c++/7/bits/stl_iterator.h",fullname="/usr/include/c++/7/bits/stl_iterator.h",line="783"}
Solution::combinationSum (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, target=7) at solution.cpp:35
~"\n\032\032frame-begin 0 0x555555554bf3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bf3",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="35"}
~"\n\032\032frame-begin 0 0x555555554c15\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c15",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="37"}
~"\n\032\032frame-begin 0 0x555555554c29\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c29",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="31"}
~"\n\032\032frame-begin 0 0x555555554c35\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c35",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="37"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, main () at solution.cpp:68
~"\n\032\032frame-begin 0 0x555555554a96\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a96",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="1",original-location="solution.cpp:68"}]}
~"\n\032\032frame-begin 0 0x555555554abc\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554abc",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="66"}
~"\n\032\032frame-begin 0 0x555555554ac8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ac8",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="65"}
~"\n\032\032frame-begin 0 0x555555554ad4\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ad4",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="71"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, main () at solution.cpp:68
~"\n\032\032frame-begin 0 0x555555554a96\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a96",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="1",original-location="solution.cpp:68"}]}
Solution::combinationSum (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, target=7) at solution.cpp:29
~"\n\032\032frame-begin 0 0x555555554ba6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ba6",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="29"}
~"\n\032\032frame-begin 0 0x555555554bb5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bb5",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="31"}
~"\n\032\032frame-begin 0 0x555555554bc1\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bc1",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="33"}
~"\n\032\032frame-begin 0 0x555555554bcd\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bcd",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="34"}
~"\n\032\032frame-begin 0 0x555555554bf3\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554bf3",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="35"}
&"complete pvect\n"
~"pvector\n"
^done
Solution::combination (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
&"complete p &candi\n"
~"p &candidates\n"
^done
&"complete up\n"
~"up\n"
~"up-silently\n"
~"update\n"
^done
#1  0x0000555555554c15 in Solution::combinationSum (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, target=7) at solution.cpp:35
~"\n\032\032frame-begin 1 0x555555554c15\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="1",addr="0x0000555555554c15",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="35"}
#0  Solution::combination (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
#1  0x0000555555554c15 in Solution::combinationSum (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, target=7) at solution.cpp:35
~"\n\032\032frame-begin 1 0x555555554c15\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="1",addr="0x0000555555554c15",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="35"}
#0  Solution::combination (this=0x7fffffffda70, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032frame-begin 0 0x555555554cac\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554cac",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="49"}
44	        {
45	            m_vecRet.push_back(curr);
46	        }
47	        else
48	        {
49	            for (size_t i = idx; i < candidates.size(); ++i)
50	            {
51	                if (target >= candidates[i])
52	                {
53	                    curr.push_back(candidates[i]);

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="55",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:68"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, main () at solution.cpp:68
~"\n\032\032frame-begin 0 0x555555554a96\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554a96",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554a96",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="68",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:68"}]}
Solution::combinationSum (this=0x7fffffffdad0, candidates=std::vector of length 4, capacity 4 = {...}, target=7) at solution.cpp:29
~"\n\032\032frame-begin 0 0x555555554ba6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ba6",func="Solution::combinationSum",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="29"}

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="55",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"printf \"m_vecRet:\\n\"","pvector m_vecRet"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"printf \"m_vecRet:\\n\"","pvector m_vecRet"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}

Breakpoint 1, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 1, capacity 1 = {...}, target=5) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="2",script={"printf \"m_vecRet:\\n\"","pvector m_vecRet"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}

Breakpoint 1, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 2, capacity 2 = {...}, target=3) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="3",script={"printf \"m_vecRet:\\n\"","pvector m_vecRet"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}

Breakpoint 1, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 3, capacity 4 = {...}, target=1) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="4",script={"printf \"m_vecRet:\\n\"","pvector m_vecRet"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}

Breakpoint 1, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 3, capacity 4 = {...}, target=0) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="5",script={"printf \"m_vecRet:\\n\"","pvector m_vecRet"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}

Breakpoint 1, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 2, capacity 4 = {...}, target=2) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="6",script={"printf \"m_vecRet:\\n\"","pvector m_vecRet"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 1, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"printf \"m_vecRet:\\n\"","pvector m_vecRet"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}
&"complete down\n"
~"down\n"
~"down-silently\n"
~"downbp\n"
^done
&"complete downb\n"
~"downbp\n"
^done
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="55",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",macro-info="0"
^done
&"complete b com\n"
~"b Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)\n"
~"b Solution::combinationSum(std::vector<int, std::allocator<int> >&, int)\n"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",original-location="Solution::combination"}]}
&"complete sour\n"
~"source\n"
^done
&"complete source .gdb_b\n"
~"source .gdb_bp\n"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",original-location="Solution::combination"},bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"print   \"----------------------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}
&"complete downb\n"
~"downbp\n"
^done
&"complete inf\n"
~"inferior\n"
~"info\n"
^done
&"complete info br\n"
~"info breakpoints\n"
^done
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000000c8e in Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int) at solution.cpp:43
2       breakpoint     keep y   0x0000000000000c8e in Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int) at solution.cpp:43
        print   "----------------------\n"
        print   "candidates:"
        pvector candidates
        printf  "idx=%d,",idx
        print   "curr:"
        pvector curr
        print   "m_vecRet:"
        pvector m_vecRet
        printf  "target=%d",target
&"complete clear \n"
~"clear Solution::Solution()\n"
~"clear Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)\n"
~"clear Solution::combinationSum(std::vector<int, std::allocator<int> >&, int)\n"
~"clear Solution::~Solution()\n"
~"clear _Unwind_Resume\n"
~"clear _Unwind_Resume@plt\n"
~"clear __cxa_begin_catch\n"
~"clear __cxa_begin_catch@plt\n"
~"clear __cxa_end_catch\n"
~"clear __cxa_end_catch@plt\n"
~"clear __cxa_finalize\n"
~"clear __cxa_finalize@plt\n"
~"clear __cxa_rethrow\n"
~"clear __cxa_rethrow@plt\n"
~"clear __do_global_dtors_aux\n"
~"clear __gnu_cxx::__alloc_traits<std::allocator<int> >::_S_select_on_copy(std::allocator<int> const&)\n"
~"clear __gnu_cxx::__alloc_traits<std::allocator<std::vector<int, std::allocator<int> > > >::_S_select_on_copy(std::allocator<std::vector<int, std::allocator<int> > > const&)\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__copy_move_backward_a2<true, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >)\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__miter_base<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >)\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__unguarded_partition<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__unguarded_partition_pivot<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::move_backward<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >)\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&)\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++()\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator-(long) const\n"
~"clear __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--()\n"
~"clear __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> > const* const&)\n"
~"clear __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::base() const\n"
~"clear __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator*() const\n"
~"clear __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::operator++()\n"
~"clear __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> >* const&)\n"
~"clear __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::base() const\n"
~"clear __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::difference_type __gnu_cxx::operator-<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&)\n"
~"clear __gnu_cxx::__ops::_Iter_less_val::_Iter_less_val(__gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear __gnu_cxx::__ops::__iter_less_iter()\n"
~"clear __gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)\n"
~"clear __gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long)\n"
~"clear __gnu_cxx::new_allocator<int>::new_allocator()\n"
~"clear __gnu_cxx::new_allocator<int>::new_allocator(__gnu_cxx::new_allocator<int> const&)\n"
~"clear __gnu_cxx::new_allocator<int>::~new_allocator()\n"
~"clear __gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::allocate(unsigned long, void const*)\n"
~"clear __gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::deallocate(std::vector<int, std::allocator<int> >*, unsigned long)\n"
~"clear __gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::new_allocator()\n"
~"clear __gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::new_allocator(__gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > > const&)\n"
~"clear __gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::~new_allocator()\n"
~"clear __stack_chk_fail\n"
~"clear __stack_chk_fail@plt\n"
~"clear _init\n"
~"clear _start\n"
~"clear bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const\n"
~"clear bool __gnu_cxx::__ops::_Val_less_iter::operator()<int, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(int&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const\n"
~"clear bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)\n"
~"clear bool __gnu_cxx::operator!=<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&)\n"
~"clear bool __gnu_cxx::operator< <int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)\n"
~"clear bool __gnu_cxx::operator==<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)\n"
~"clear deregister_tm_clones\n"
~"clear frame_dummy\n"
~"clear int const& std::forward<int const&>(std::remove_reference<int const&>::type&)\n"
~"clear int* std::__uninitialized_copy<true>::__uninit_copy<int const*, int*>(int const*, int const*, int*)\n"
~"clear int* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, int>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*, std::allocator<int>&)\n"
~"clear int* std::__uninitialized_copy_a<int const*, int*, int>(int const*, int const*, int*, std::allocator<int>&)\n"
~"clear int* std::__uninitialized_copy_a<std::move_iterator<int*>, int*, int>(std::move_iterator<int*>, std::move_iterator<int*>, int*, std::allocator<int>&)\n"
~"clear int* std::__uninitialized_move_if_noexcept_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&)\n"
~"clear int* std::uninitialized_copy<int const*, int*>(int const*, int const*, int*)\n"
~"clear int* std::uninitialized_copy<std::move_iterator<int*>, int*>(std::move_iterator<int*>, std::move_iterator<int*>, int*)\n"
~"clear main\n"
~"clear memmove\n"
~"clear memmove@plt\n"
~"clear operator delete(void*)\n"
~"clear operator delete(void*)@plt\n"
~"clear operator delete(void*, void*)\n"
~"clear operator new(unsigned long)\n"
~"clear operator new(unsigned long)@plt\n"
~"clear operator new(unsigned long, void*)\n"
~"clear register_tm_clones\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_Vector_base()\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_Vector_base(std::allocator<int> const&)\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl()\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&)\n"
~"clear std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()\n"
~"clear std::_Vector_base<int, std::allocator<int> >::~_Vector_base()\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_allocate(unsigned long)\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_create_storage(unsigned long)\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_deallocate(std::vector<int, std::allocator<int> >*, unsigned long)\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_get_Tp_allocator()\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_get_Tp_allocator() const\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_base()\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_base(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&)\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl::_Vector_impl()\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl::_Vector_impl(std::allocator<std::vector<int, std::allocator<int> > > const&)\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl::~_Vector_impl()\n"
~"clear std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~_Vector_base()\n"
~"clear std::__lg(long)\n"
~"clear std::__throw_bad_alloc()\n"
~"clear std::__throw_bad_alloc()@plt\n"
~"clear std::__throw_length_error(char const*)\n"
~"clear std::__throw_length_error(char const*)@plt\n"
~"clear std::allocator<int>::allocator()\n"
~"clear std::allocator<int>::allocator(std::allocator<int> const&)\n"
~"clear std::allocator<int>::~allocator()\n"
~"clear std::allocator<std::vector<int, std::allocator<int> > >::allocator()\n"
~"clear std::allocator<std::vector<int, std::allocator<int> > >::allocator(std::allocator<std::vector<int, std::allocator<int> > > const&)\n"
~"clear std::allocator<std::vector<int, std::allocator<int> > >::~allocator()\n"
~"clear std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long)\n"
~"clear std::allocator_traits<std::allocator<int> >::deallocate(std::allocator<int>&, int*, unsigned long)\n"
~"clear std::allocator_traits<std::allocator<int> >::max_size(std::allocator<int> const&)\n"
~"clear std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::allocate(std::allocator<std::vector<int, std::allocator<int> > >&, unsigned long)\n"
~"clear std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::deallocate(std::allocator<std::vector<int, std::allocator<int> > >&, std::vector<int, std::allocator<int> >*, unsigned long)\n"
~"clear std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::max_size(std::allocator<std::vector<int, std::allocator<int> > > const&)\n"
~"clear std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::select_on_container_copy_construction(std::allocator<std::vector<int, std::allocator<int> > > const&)\n"
~"clear std::initializer_list<int>::begin() const\n"
~"clear std::initializer_list<int>::end() const\n"
~"clear std::initializer_list<int>::size() const\n"
~"clear std::iterator_traits<int const*>::difference_type std::__distance<int const*>(int const*, int const*, std::random_access_iterator_tag)\n"
~"clear std::iterator_traits<int const*>::difference_type std::distance<int const*>(int const*, int const*)\n"
~"clear std::iterator_traits<int const*>::iterator_category std::__iterator_category<int const*>(int const* const&)\n"
~"clear std::move_iterator<int*> std::__make_move_if_noexcept_iterator<int, std::move_iterator<int*> >(int*)\n"
~"clear std::move_iterator<int*>::move_iterator(int*)\n"
~"clear std::move_iterator<std::vector<int, std::allocator<int> >*> std::__make_move_if_noexcept_iterator<std::vector<int, std::allocator<int> >, std::move_iterator<std::vector<int, std::allocator<int> >*> >(std::vector<int, std::allocator<int> >*)\n"
~"clear std::move_iterator<std::vector<int, std::allocator<int> >*>::move_iterator(std::vector<int, std::allocator<int> >*)\n"
~"clear std::remove_reference<int&>::type&& std::move<int&>(int&)\n"
~"clear std::vector<int, std::allocator<int> > const& std::forward<std::vector<int, std::allocator<int> > const&>(std::remove_reference<std::vector<int, std::allocator<int> > const&>::type&)\n"
~"clear std::vector<int, std::allocator<int> >* std::__addressof<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >&)\n"
~"clear std::vector<int, std::allocator<int> >* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> >*>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> >*)\n"
~"clear std::vector<int, std::allocator<int> >* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> >*, std::allocator<std::vector<int, std::allocator<int> > >&)\n"
~"clear std::vector<int, std::allocator<int> >* std::__uninitialized_copy_a<std::move_iterator<std::vector<int, std::allocator<int> >*>, std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > >(std::move_iterator<std::vector<int, std::allocator<int> >*>, std::move_iterator<std::vector<int, std::allocator<int> >*>, std::vector<int, std::allocator<int> >*, std::allocator<std::vector<int, std::allocator<int> > >&)\n"
~"clear std::vector<int, std::allocator<int> >* std::__uninitialized_move_if_noexcept_a<std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*, std::allocator<std::vector<int, std::allocator<int> > > >(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*, std::allocator<std::vector<int, std::allocator<int> > >&)\n"
~"clear std::vector<int, std::allocator<int> >* std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> >*>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> >*)\n"
~"clear std::vector<int, std::allocator<int> >* std::uninitialized_copy<std::move_iterator<std::vector<int, std::allocator<int> >*>, std::vector<int, std::allocator<int> >*>(std::move_iterator<std::vector<int, std::allocator<int> >*>, std::move_iterator<std::vector<int, std::allocator<int> >*>, std::vector<int, std::allocator<int> >*)\n"
~"clear std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const\n"
~"clear std::vector<int, std::allocator<int> >::begin()\n"
~"clear std::vector<int, std::allocator<int> >::begin() const\n"
~"clear std::vector<int, std::allocator<int> >::end()\n"
~"clear std::vector<int, std::allocator<int> >::end() const\n"
~"clear std::vector<int, std::allocator<int> >::max_size() const\n"
~"clear std::vector<int, std::allocator<int> >::operator[](unsigned long) const\n"
~"clear std::vector<int, std::allocator<int> >::pop_back()\n"
~"clear std::vector<int, std::allocator<int> >::push_back(int const&)\n"
~"clear std::vector<int, std::allocator<int> >::size() const\n"
~"clear std::vector<int, std::allocator<int> >::vector()\n"
~"clear std::vector<int, std::allocator<int> >::vector(std::initializer_list<int>, std::allocator<int> const&)\n"
~"clear std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&)\n"
~"clear std::vector<int, std::allocator<int> >::~vector()\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_check_len(unsigned long, char const*) const\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_erase_at_end(std::vector<int, std::allocator<int> >*)\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::begin()\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::begin() const\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::clear()\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::end()\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::end() const\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::max_size() const\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::push_back(std::vector<int, std::allocator<int> > const&)\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::size() const\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::vector()\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::vector(std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&)\n"
~"clear std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()\n"
~"clear unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)\n"
~"clear void __gnu_cxx::new_allocator<int>::construct<int, int const&>(int*, int const&)\n"
~"clear void __gnu_cxx::new_allocator<int>::destroy<int>(int*)\n"
~"clear void __gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::construct<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> > const&>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > const&)\n"
~"clear void __gnu_cxx::new_allocator<std::vector<int, std::allocator<int> > >::destroy<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*)\n"
~"clear void std::_Construct<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> > const&>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > const&)\n"
~"clear void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)\n"
~"clear void std::_Destroy<int*>(int*, int*)\n"
~"clear void std::_Destroy<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*)\n"
~"clear void std::_Destroy<std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*, std::allocator<std::vector<int, std::allocator<int> > >&)\n"
~"clear void std::_Destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)\n"
~"clear void std::_Destroy_aux<false>::__destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)\n"
~"clear void std::_Destroy_aux<true>::__destroy<int*>(int*, int*)\n"
~"clear void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear void std::__heap_select<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear void std::__insertion_sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear void std::__introsort_loop<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, long, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear void std::__make_heap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter&)\n"
~"clear void std::__move_median_to_first<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear void std::__partial_sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear void std::__pop_heap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter&)\n"
~"clear void std::__sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear void std::__sort_heap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter&)\n"
~"clear void std::__unguarded_insertion_sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_less_iter)\n"
~"clear void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Val_less_iter>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Val_less_iter)\n"
~"clear void std::allocator_traits<std::allocator<int> >::construct<int, int const&>(std::allocator<int>&, int*, int const&)\n"
~"clear void std::allocator_traits<std::allocator<int> >::destroy<int>(std::allocator<int>&, int*)\n"
~"clear void std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::construct<std::vector<int, std::allocator<int> >, std::vector<int, std::allocator<int> > const&>(std::allocator<std::vector<int, std::allocator<int> > >&, std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > const&)\n"
~"clear void std::allocator_traits<std::allocator<std::vector<int, std::allocator<int> > > >::destroy<std::vector<int, std::allocator<int> > >(std::allocator<std::vector<int, std::allocator<int> > >&, std::vector<int, std::allocator<int> >*)\n"
~"clear void std::iter_swap<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >)\n"
~"clear void std::sort<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >)\n"
~"clear void std::vector<int, std::allocator<int> >::_M_range_initialize<int const*>(int const*, int const*, std::forward_iterator_tag)\n"
~"clear void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)\n"
~"clear void std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_realloc_insert<std::vector<int, std::allocator<int> > const&>(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> >*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> > const&)\n"
~"clear  *** List may be truncated, max-completions reached. ***\n"
^done
&"complete clear b\n"
~"clear bool\n"
~"clear bool __gnu_cxx::__ops::_Iter_less_iter::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const\n"
~"clear bool __gnu_cxx::__ops::_Iter_less_val::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int&) const\n"
~"clear bool __gnu_cxx::__ops::_Val_less_iter::operator()<int, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(int&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) const\n"
~"clear bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)\n"
~"clear bool __gnu_cxx::operator!=<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > > const&)\n"
~"clear bool __gnu_cxx::operator< <int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)\n"
~"clear bool __gnu_cxx::operator==<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&)\n"
~"clear bool std::operator!=<std::vector<int, std::allocator<int> >*>(std::move_iterator<std::vector<int, std::allocator<int> >*> const&, std::move_iterator<std::vector<int, std::allocator<int> >*> const&)\n"
~"clear bool std::operator==<std::vector<int, std::allocator<int> >*>(std::move_iterator<std::vector<int, std::allocator<int> >*> const&, std::move_iterator<std::vector<int, std::allocator<int> >*> const&)\n"
^done
&"complete clear br\n"
^done
&"complete del\n"
~"delete\n"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"print   \"----------------------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"print   \"----------------------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp:43"},bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"print   \"----------------------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="Solution::combination"}]}
&"complete de\n"
~"define\n"
~"delete\n"
~"demangle\n"
~"detach\n"
^done
&"complete dele\n"
~"delete\n"
^done
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="4",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"print   \"----------------------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="Solution::combination"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 4, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="4",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"print   \"----------------------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="Solution::combination"}]}
&"complete del\n"
~"delete\n"
^done
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="5",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"print   \"--------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="Solution::combination"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 5, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="5",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"print   \"--------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="Solution::combination"}]}
&"complete del\n"
~"delete\n"
^done
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"printf   \"------------------------------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="Solution::combination"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 6, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"printf   \"------------------------------\\n\"","print   \"candidates:\"","pvector candidates","printf  \"idx=%d,\",idx","print   \"curr:\"","pvector curr","print   \"m_vecRet:\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="Solution::combination"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"printf   \"------------------------------\\n\"","printf  \"candidates=\\n\"","pvector candidates","printf  \"idx=%d,\",idx","printf  \"curr=\\n\"","pvector curr","printf  \"m_vecRet=\\n\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="Solution::combination"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 7, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"printf   \"------------------------------\\n\"","printf  \"candidates=\\n\"","pvector candidates","printf  \"idx=%d,\",idx","printf  \"curr=\\n\"","pvector curr","printf  \"m_vecRet=\\n\"","pvector m_vecRet","printf  \"target=%d\",target"},original-location="Solution::combination"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="8",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"printf   \"------------------------------\\n\"","printf  \"candidates=\\n\"","pvector candidates","printf  \"idx=%d,\",idx","printf  \"curr=\\n\"","pvector curr","printf  \"m_vecRet=\\n\"","pvector m_vecRet","printf  \"target=%d\\n\",target"},original-location="Solution::combination"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 8, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="8",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"printf   \"------------------------------\\n\"","printf  \"candidates=\\n\"","pvector candidates","printf  \"idx=%d,\",idx","printf  \"curr=\\n\"","pvector curr","printf  \"m_vecRet=\\n\"","pvector m_vecRet","printf  \"target=%d\\n\",target"},original-location="Solution::combination"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="9",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------target=%d--------------------\\n\",target"},original-location="Solution::combination"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 9, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="9",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------target=%d--------------------\\n\",target"},original-location="Solution::combination"}]}

Breakpoint 9, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 1, capacity 1 = {...}, target=5) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="9",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="2",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------target=%d--------------------\\n\",target"},original-location="Solution::combination"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet"},original-location="Solution::combination"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 10, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet"},original-location="Solution::combination"}]}

Breakpoint 10, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 1, capacity 1 = {...}, target=5) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="2",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet"},original-location="Solution::combination"}]}

Breakpoint 10, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 2, capacity 2 = {...}, target=3) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="3",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet"},original-location="Solution::combination"}]}

Breakpoint 10, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 3, capacity 4 = {...}, target=1) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="4",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet"},original-location="Solution::combination"}]}

Breakpoint 10, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 3, capacity 4 = {...}, target=0) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="5",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet"},original-location="Solution::combination"}]}
&"complete de\n"
~"define\n"
~"delete\n"
~"demangle\n"
~"detach\n"
^done
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="0",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 1, capacity 1 = {...}, target=5) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="2",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}
~"\n\032\032frame-begin 0 0x555555554cac\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554cac",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="49"}
~"\n\032\032frame-begin 0 0x555555554ccf\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ccf",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="51"}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 2, capacity 2 = {...}, target=3) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="3",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}
~"\n\032\032frame-begin 0 0x555555554cac\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554cac",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="49"}
~"\n\032\032frame-begin 0 0x555555554ccf\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ccf",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="51"}
~"\n\032\032frame-begin 0 0x555555554cee\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554cee",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="53"}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 3, capacity 4 = {...}, target=1) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="4",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 3, capacity 4 = {...}, target=0) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="5",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 2, capacity 4 = {...}, target=2) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="6",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 1, capacity 4 = {...}, target=4) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="7",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/a.out 

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 0, capacity 0, target=7) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="1",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 1, capacity 1 = {...}, target=5) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="2",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 2, capacity 2 = {...}, target=3) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="3",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=0, curr=std::vector of length 3, capacity 4 = {...}, target=1) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="4",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 3, capacity 4 = {...}, target=0) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="5",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 2, capacity 4 = {...}, target=2) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="6",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 1, capacity 4 = {...}, target=4) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="7",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=1, curr=std::vector of length 2, capacity 4 = {...}, target=1) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="8",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=2, curr=std::vector of length 1, capacity 4 = {...}, target=1) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="9",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}

Breakpoint 11, Solution::combination (this=0x7fffffffda90, candidates=std::vector of length 4, capacity 4 = {...}, idx=3, curr=std::vector of length 1, capacity 4 = {...}, target=0) at solution.cpp:43
~"\n\032\032frame-begin 0 0x555555554c8e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554c8e",func="Solution::combination",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554c8e",func="Solution::combination(std::vector<int, std::allocator<int> > const&, unsigned long, std::vector<int, std::allocator<int> >&, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",line="43",thread-groups=["i1"],times="10",script={"printf   \"========================================\\n\"","printf   \"----------candidates--------------------\\n\"","pvector candidates","printf   \"----------idx=%d--------------------\\n\",idx","printf   \"----------curr--------------------\\n\"","pvector curr","printf   \"----------target=%d--------------------\\n\",target","printf   \"----------m_vecRet--------------------\\n\"","pvector m_vecRet","printf   \"----------i=%d--------------------\\n\",i"},original-location="Solution::combination"}]}
[Inferior 1 (process 29722) exited normally]
^error,msg="No registers."
^done,line="43",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/039.Combination-Sum/solution.cpp",macro-info="0"
