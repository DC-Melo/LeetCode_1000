
warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="116",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="116",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000991",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:128"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 1, main () at solution.cpp:128
~"\n\032\032frame-begin 0 0x555555554991\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554991",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554991",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:128"}]}
Solution::isMatch (this=0x7fffffffdb05, s=0x555555554f57 "adcab", p=0x555555554f55 "*") at solution.cpp:12
~"\n\032\032frame-begin 0 0x555555554ac6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ac6",func="Solution::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="12"}
&"complete source a.ou\n"
~"source a.out\n"
^done
&"complete file a.ou\n"
~"file a.out\n"
^done
~"\n\032\032frame-begin 0 0x555555554ac6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ac6",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000991",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:128"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555554ac6:\tmov    -0x58(%rbp),%rax\n"
~"   0x555555554aca:\tmov    %rax,-0x30(%rbp)\n"
~"   0x555555554ace:\tmov    -0x58(%rbp),%rax\n"
~"   0x555555554ad2:\tmov    %rax,-0x28(%rbp)\n"
~"   0x555555554ad6:\tmov    -0x50(%rbp),%rax\n"
~"   0x555555554ada:\tmov    %rax,-0x18(%rbp)\n"
~"   0x555555554ade:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554ae2:\tmovzbl (%rax),%eax\n"
~"   0x555555554ae5:\tcmp    $0x2a,%al\n"
~"   0x555555554ae7:\tjne    0x555555554aef\n"
~"   0x555555554ae9:\tmovb   $0x1,-0x32(%rbp)\n"
~"   0x555555554aed:\tjmp    0x555555554af3\n"
~"   0x555555554aef:\tmovb   $0x0,-0x32(%rbp)\n"
~"   0x555555554af3:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554af7:\tmovzbl (%rax),%eax\n"
~"   0x555555554afa:\ttest   %al,%al\n"
~"   0x555555554afc:\tje     0x555555554b10\n"
~"   0x555555554afe:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554b02:\tmovzbl (%rax),%eax\n"
~"   0x555555554b05:\tcmp    $0x2a,%al\n"
~"   0x555555554b07:\tjne    0x555555554b10\n"
~"   0x555555554b09:\taddq   $0x1,-0x30(%rbp)\n"
~"   0x555555554b0e:\tjmp    0x555555554af3\n"
~"   0x555555554b10:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554b14:\tmov    %rax,-0x28(%rbp)\n"
~"   0x555555554b18:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555554b1c:\tmovzbl (%rax),%eax\n"
~"   0x555555554b1f:\ttest   %al,%al\n"
~"   0x555555554b21:\tje     0x555555554b35\n"
~"   0x555555554b23:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555554b27:\tmovzbl (%rax),%eax\n"
~"   0x555555554b2a:\tcmp    $0x2a,%al\n"
~"   0x555555554b2c:\tje     0x555555554b35\n"
~"   0x555555554b2e:\taddq   $0x1,-0x28(%rbp)\n"
~"   0x555555554b33:\tjmp    0x555555554b18\n"
~"   0x555555554b35:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555554b39:\tmovzbl (%rax),%eax\n"
~"   0x555555554b3c:\tcmp    $0x2a,%al\n"
~"   0x555555554b3e:\tjne    0x555555554b46\n"
~"   0x555555554b40:\tmovb   $0x1,-0x31(%rbp)\n"
~"   0x555555554b44:\tjmp    0x555555554b4a\n"
~"   0x555555554b46:\tmovb   $0x0,-0x31(%rbp)\n"
~"   0x555555554b4a:\tsubq   $0x1,-0x28(%rbp)\n"
~"   0x555555554b4f:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555554b53:\tmovzbl (%rax),%eax\n"
~"   0x555555554b56:\ttest   %al,%al\n"
~"   0x555555554b58:\tjne    0x555555554b75\n"
~"   0x555555554b5a:\tcmpb   $0x0,-0x32(%rbp)\n"
~"   0x555555554b5e:\tje     0x555555554b75\n"
~"   0x555555554b60:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554b64:\tmovzbl (%rax),%eax\n"
~"   0x555555554b67:\ttest   %al,%al\n"
~"   0x555555554b69:\tjne    0x555555554b75\n"
~"   0x555555554b6b:\tmov    $0x1,%eax\n"
~"   0x555555554b70:\tjmpq   0x555555554ec4\n"
~"   0x555555554b75:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555554b79:\tmovzbl (%rax),%eax\n"
~"   0x555555554b7c:\ttest   %al,%al\n"
~"   0x555555554b7e:\tje     0x555555554b9b\n"
~"   0x555555554b80:\tcmpb   $0x0,-0x32(%rbp)\n"
~"   0x555555554b84:\tje     0x555555554b9b\n"
~"   0x555555554b86:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554b8a:\tmovzbl (%rax),%eax\n"
~"   0x555555554b8d:\ttest   %al,%al\n"
~"   0x555555554b8f:\tjne    0x555555554b9b\n"
~"   0x555555554b91:\tmov    $0x1,%eax\n"
~"   0x555555554b96:\tjmpq   0x555555554ec4\n"
~"   0x555555554b9b:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555554b9f:\tmovzbl (%rax),%eax\n"
~"   0x555555554ba2:\ttest   %al,%al\n"
~"   0x555555554ba4:\tje     0x555555554bc6\n"
~"   0x555555554ba6:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554baa:\tmovzbl (%rax),%eax\n"
~"   0x555555554bad:\ttest   %al,%al\n"
~"   0x555555554baf:\tjne    0x555555554bc6\n"
~"   0x555555554bb1:\tmovzbl -0x32(%rbp),%eax\n"
~"   0x555555554bb5:\txor    $0x1,%eax\n"
~"   0x555555554bb8:\ttest   %al,%al\n"
~"   0x555555554bba:\tje     0x555555554bc6\n"
~"   0x555555554bbc:\tmov    $0x0,%eax\n"
~"   0x555555554bc1:\tjmpq   0x555555554ec4\n"
~"   0x555555554bc6:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555554bca:\tmovzbl (%rax),%eax\n"
~"   0x555555554bcd:\ttest   %al,%al\n"
~"   0x555555554bcf:\tjne    0x555555554be6\n"
~"   0x555555554bd1:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554bd5:\tmovzbl (%rax),%eax\n"
~"   0x555555554bd8:\ttest   %al,%al\n"
~"   0x555555554bda:\tje     0x555555554be6\n"
~"   0x555555554bdc:\tmov    $0x0,%eax\n"
~"   0x555555554be1:\tjmpq   0x555555554ec4\n"
~"   0x555555554be6:\tcmpb   $0x0,-0x31(%rbp)\n"
~"   0x555555554bea:\tje     0x555555554d88\n"
~"   0x555555554bf0:\tcmpb   $0x0,-0x32(%rbp)\n"
~"   0x555555554bf4:\tje     0x555555554cfa\n"
~"   0x555555554bfa:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555554bfe:\tmov    %rax,-0x8(%rbp)\n"
~"   0x555555554c02:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554c06:\tmov    %rax,-0x20(%rbp)\n"
~"   0x555555554c0a:\tmov    -0x20(%rbp),%rax\n"
^done

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="116",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000991",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:128"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 1, main () at solution.cpp:128
~"\n\032\032frame-begin 0 0x555555554991\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554991",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554991",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:128"}]}
125	int main(){
   0x000055555555497a <+0>:	push   %rbp
   0x000055555555497b <+1>:	mov    %rsp,%rbp
   0x000055555555497e <+4>:	sub    $0x10,%rsp
   0x0000555555554982 <+8>:	mov    %fs:0x28,%rax
   0x000055555555498b <+17>:	mov    %rax,-0x8(%rbp)
   0x000055555555498f <+21>:	xor    %eax,%eax

126	    Solution sln;
127	    /* bool ret=sln.isMatch("adcab","*ab"); */
128	    bool ret=sln.isMatch("adcab","*ab");
=> 0x0000555555554991 <+23>:	lea    -0xb(%rbp),%rax
   0x0000555555554995 <+27>:	lea    0x5b9(%rip),%rdx        # 0x555555554f55
   0x000055555555499c <+34>:	lea    0x5b6(%rip),%rsi        # 0x555555554f59
   0x00005555555549a3 <+41>:	mov    %rax,%rdi
   0x00005555555549a6 <+44>:	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x00005555555549ab <+49>:	mov    %al,-0xa(%rbp)

129	    cout << "ret:"<<ret<<endl;
   0x00005555555549ae <+52>:	lea    0x5aa(%rip),%rsi        # 0x555555554f5f
   0x00005555555549b5 <+59>:	lea    0x201664(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x00005555555549bc <+66>:	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x00005555555549c1 <+71>:	mov    %rax,%rdx
   0x00005555555549c4 <+74>:	movzbl -0xa(%rbp),%eax
   0x00005555555549c8 <+78>:	mov    %eax,%esi
   0x00005555555549ca <+80>:	mov    %rdx,%rdi
   0x00005555555549cd <+83>:	callq  0x555555554850 <_ZNSolsEb@plt>
   0x00005555555549d2 <+88>:	mov    %rax,%rdx
   0x00005555555549d5 <+91>:	mov    0x2015f4(%rip),%rax        # 0x555555755fd0
   0x00005555555549dc <+98>:	mov    %rax,%rsi
   0x00005555555549df <+101>:	mov    %rdx,%rdi
   0x00005555555549e2 <+104>:	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>

130	    bool ret1=sln.isMatch("aa","*");
   0x00005555555549e7 <+109>:	lea    -0xb(%rbp),%rax
   0x00005555555549eb <+113>:	lea    0x572(%rip),%rdx        # 0x555555554f64
   0x00005555555549f2 <+120>:	lea    0x56d(%rip),%rsi        # 0x555555554f66
   0x00005555555549f9 <+127>:	mov    %rax,%rdi
   0x00005555555549fc <+130>:	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x0000555555554a01 <+135>:	mov    %al,-0x9(%rbp)

131	    cout << "ret1:"<<ret1<<endl;
   0x0000555555554a04 <+138>:	lea    0x55e(%rip),%rsi        # 0x555555554f69
   0x0000555555554a0b <+145>:	lea    0x20160e(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x0000555555554a12 <+152>:	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x0000555555554a17 <+157>:	mov    %rax,%rdx
   0x0000555555554a1a <+160>:	movzbl -0x9(%rbp),%eax
   0x0000555555554a1e <+164>:	mov    %eax,%esi
   0x0000555555554a20 <+166>:	mov    %rdx,%rdi
   0x0000555555554a23 <+169>:	callq  0x555555554850 <_ZNSolsEb@plt>
   0x0000555555554a28 <+174>:	mov    %rax,%rdx
   0x0000555555554a2b <+177>:	mov    0x20159e(%rip),%rax        # 0x555555755fd0
   0x0000555555554a32 <+184>:	mov    %rax,%rsi
   0x0000555555554a35 <+187>:	mov    %rdx,%rdi
   0x0000555555554a38 <+190>:	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>

132	
133	}
   0x0000555555554a3d <+195>:	mov    $0x0,%eax
   0x0000555555554a42 <+200>:	mov    -0x8(%rbp),%rcx
   0x0000555555554a46 <+204>:	xor    %fs:0x28,%rcx
   0x0000555555554a4f <+213>:	je     0x555555554a56 <main()+220>
   0x0000555555554a51 <+215>:	callq  0x555555554830 <__stack_chk_fail@plt>
   0x0000555555554a56 <+220>:	leaveq 
   0x0000555555554a57 <+221>:	retq   

solution.cpp:
125	int main(){
   0x000055555555497a <+0>:	push   %rbp
   0x000055555555497b <+1>:	mov    %rsp,%rbp
   0x000055555555497e <+4>:	sub    $0x10,%rsp
   0x0000555555554982 <+8>:	mov    %fs:0x28,%rax
   0x000055555555498b <+17>:	mov    %rax,-0x8(%rbp)
   0x000055555555498f <+21>:	xor    %eax,%eax

126	    Solution sln;
127	    /* bool ret=sln.isMatch("adcab","*ab"); */
128	    bool ret=sln.isMatch("adcab","*ab");
=> 0x0000555555554991 <+23>:	lea    -0xb(%rbp),%rax
   0x0000555555554995 <+27>:	lea    0x5b9(%rip),%rdx        # 0x555555554f55
   0x000055555555499c <+34>:	lea    0x5b6(%rip),%rsi        # 0x555555554f59
   0x00005555555549a3 <+41>:	mov    %rax,%rdi
   0x00005555555549a6 <+44>:	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x00005555555549ab <+49>:	mov    %al,-0xa(%rbp)

129	    cout << "ret:"<<ret<<endl;
   0x00005555555549ae <+52>:	lea    0x5aa(%rip),%rsi        # 0x555555554f5f
   0x00005555555549b5 <+59>:	lea    0x201664(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x00005555555549bc <+66>:	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x00005555555549c1 <+71>:	mov    %rax,%rdx
   0x00005555555549c4 <+74>:	movzbl -0xa(%rbp),%eax
   0x00005555555549c8 <+78>:	mov    %eax,%esi
   0x00005555555549ca <+80>:	mov    %rdx,%rdi
   0x00005555555549cd <+83>:	callq  0x555555554850 <_ZNSolsEb@plt>
   0x00005555555549d2 <+88>:	mov    %rax,%rdx
   0x00005555555549d5 <+91>:	mov    0x2015f4(%rip),%rax        # 0x555555755fd0
   0x00005555555549dc <+98>:	mov    %rax,%rsi
   0x00005555555549df <+101>:	mov    %rdx,%rdi
   0x00005555555549e2 <+104>:	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>

130	    bool ret1=sln.isMatch("aa","*");
   0x00005555555549e7 <+109>:	lea    -0xb(%rbp),%rax
   0x00005555555549eb <+113>:	lea    0x572(%rip),%rdx        # 0x555555554f64
   0x00005555555549f2 <+120>:	lea    0x56d(%rip),%rsi        # 0x555555554f66
   0x00005555555549f9 <+127>:	mov    %rax,%rdi
   0x00005555555549fc <+130>:	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x0000555555554a01 <+135>:	mov    %al,-0x9(%rbp)

131	    cout << "ret1:"<<ret1<<endl;
   0x0000555555554a04 <+138>:	lea    0x55e(%rip),%rsi        # 0x555555554f69
   0x0000555555554a0b <+145>:	lea    0x20160e(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x0000555555554a12 <+152>:	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x0000555555554a17 <+157>:	mov    %rax,%rdx
   0x0000555555554a1a <+160>:	movzbl -0x9(%rbp),%eax
   0x0000555555554a1e <+164>:	mov    %eax,%esi
   0x0000555555554a20 <+166>:	mov    %rdx,%rdi
   0x0000555555554a23 <+169>:	callq  0x555555554850 <_ZNSolsEb@plt>
   0x0000555555554a28 <+174>:	mov    %rax,%rdx
   0x0000555555554a2b <+177>:	mov    0x20159e(%rip),%rax        # 0x555555755fd0
   0x0000555555554a32 <+184>:	mov    %rax,%rsi
   0x0000555555554a35 <+187>:	mov    %rdx,%rdi
   0x0000555555554a38 <+190>:	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>

132	
133	}
   0x0000555555554a3d <+195>:	mov    $0x0,%eax
   0x0000555555554a42 <+200>:	mov    -0x8(%rbp),%rcx
   0x0000555555554a46 <+204>:	xor    %fs:0x28,%rcx
   0x0000555555554a4f <+213>:	je     0x555555554a56 <main()+220>
   0x0000555555554a51 <+215>:	callq  0x555555554830 <__stack_chk_fail@plt>
   0x0000555555554a56 <+220>:	leaveq 
   0x0000555555554a57 <+221>:	retq   
   0x000055555555497a <+0>:	55	push   %rbp
   0x000055555555497b <+1>:	48 89 e5	mov    %rsp,%rbp
   0x000055555555497e <+4>:	48 83 ec 10	sub    $0x10,%rsp
   0x0000555555554982 <+8>:	64 48 8b 04 25 28 00 00 00	mov    %fs:0x28,%rax
   0x000055555555498b <+17>:	48 89 45 f8	mov    %rax,-0x8(%rbp)
   0x000055555555498f <+21>:	31 c0	xor    %eax,%eax
=> 0x0000555555554991 <+23>:	48 8d 45 f5	lea    -0xb(%rbp),%rax
   0x0000555555554995 <+27>:	48 8d 15 b9 05 00 00	lea    0x5b9(%rip),%rdx        # 0x555555554f55
   0x000055555555499c <+34>:	48 8d 35 b6 05 00 00	lea    0x5b6(%rip),%rsi        # 0x555555554f59
   0x00005555555549a3 <+41>:	48 89 c7	mov    %rax,%rdi
   0x00005555555549a6 <+44>:	e8 0b 01 00 00	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x00005555555549ab <+49>:	88 45 f6	mov    %al,-0xa(%rbp)
   0x00005555555549ae <+52>:	48 8d 35 aa 05 00 00	lea    0x5aa(%rip),%rsi        # 0x555555554f5f
   0x00005555555549b5 <+59>:	48 8d 3d 64 16 20 00	lea    0x201664(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x00005555555549bc <+66>:	e8 4f fe ff ff	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x00005555555549c1 <+71>:	48 89 c2	mov    %rax,%rdx
   0x00005555555549c4 <+74>:	0f b6 45 f6	movzbl -0xa(%rbp),%eax
   0x00005555555549c8 <+78>:	89 c6	mov    %eax,%esi
   0x00005555555549ca <+80>:	48 89 d7	mov    %rdx,%rdi
   0x00005555555549cd <+83>:	e8 7e fe ff ff	callq  0x555555554850 <_ZNSolsEb@plt>
   0x00005555555549d2 <+88>:	48 89 c2	mov    %rax,%rdx
   0x00005555555549d5 <+91>:	48 8b 05 f4 15 20 00	mov    0x2015f4(%rip),%rax        # 0x555555755fd0
   0x00005555555549dc <+98>:	48 89 c6	mov    %rax,%rsi
   0x00005555555549df <+101>:	48 89 d7	mov    %rdx,%rdi
   0x00005555555549e2 <+104>:	e8 39 fe ff ff	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>
   0x00005555555549e7 <+109>:	48 8d 45 f5	lea    -0xb(%rbp),%rax
   0x00005555555549eb <+113>:	48 8d 15 72 05 00 00	lea    0x572(%rip),%rdx        # 0x555555554f64
   0x00005555555549f2 <+120>:	48 8d 35 6d 05 00 00	lea    0x56d(%rip),%rsi        # 0x555555554f66
   0x00005555555549f9 <+127>:	48 89 c7	mov    %rax,%rdi
   0x00005555555549fc <+130>:	e8 b5 00 00 00	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x0000555555554a01 <+135>:	88 45 f7	mov    %al,-0x9(%rbp)
   0x0000555555554a04 <+138>:	48 8d 35 5e 05 00 00	lea    0x55e(%rip),%rsi        # 0x555555554f69
   0x0000555555554a0b <+145>:	48 8d 3d 0e 16 20 00	lea    0x20160e(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x0000555555554a12 <+152>:	e8 f9 fd ff ff	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x0000555555554a17 <+157>:	48 89 c2	mov    %rax,%rdx
   0x0000555555554a1a <+160>:	0f b6 45 f7	movzbl -0x9(%rbp),%eax
   0x0000555555554a1e <+164>:	89 c6	mov    %eax,%esi
   0x0000555555554a20 <+166>:	48 89 d7	mov    %rdx,%rdi
   0x0000555555554a23 <+169>:	e8 28 fe ff ff	callq  0x555555554850 <_ZNSolsEb@plt>
   0x0000555555554a28 <+174>:	48 89 c2	mov    %rax,%rdx
   0x0000555555554a2b <+177>:	48 8b 05 9e 15 20 00	mov    0x20159e(%rip),%rax        # 0x555555755fd0
   0x0000555555554a32 <+184>:	48 89 c6	mov    %rax,%rsi
   0x0000555555554a35 <+187>:	48 89 d7	mov    %rdx,%rdi
   0x0000555555554a38 <+190>:	e8 e3 fd ff ff	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>
   0x0000555555554a3d <+195>:	b8 00 00 00 00	mov    $0x0,%eax
   0x0000555555554a42 <+200>:	48 8b 4d f8	mov    -0x8(%rbp),%rcx
   0x0000555555554a46 <+204>:	64 48 33 0c 25 28 00 00 00	xor    %fs:0x28,%rcx
   0x0000555555554a4f <+213>:	74 05	je     0x555555554a56 <main()+220>
   0x0000555555554a51 <+215>:	e8 da fd ff ff	callq  0x555555554830 <__stack_chk_fail@plt>
   0x0000555555554a56 <+220>:	c9	leaveq 
   0x0000555555554a57 <+221>:	c3	retq   
125	int main(){
   0x000055555555497a <+0>:	push   %rbp
   0x000055555555497b <+1>:	mov    %rsp,%rbp
   0x000055555555497e <+4>:	sub    $0x10,%rsp
   0x0000555555554982 <+8>:	mov    %fs:0x28,%rax
   0x000055555555498b <+17>:	mov    %rax,-0x8(%rbp)
   0x000055555555498f <+21>:	xor    %eax,%eax

126	    Solution sln;
127	    /* bool ret=sln.isMatch("adcab","*ab"); */
128	    bool ret=sln.isMatch("adcab","*ab");
=> 0x0000555555554991 <+23>:	lea    -0xb(%rbp),%rax
   0x0000555555554995 <+27>:	lea    0x5b9(%rip),%rdx        # 0x555555554f55
   0x000055555555499c <+34>:	lea    0x5b6(%rip),%rsi        # 0x555555554f59
   0x00005555555549a3 <+41>:	mov    %rax,%rdi
   0x00005555555549a6 <+44>:	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x00005555555549ab <+49>:	mov    %al,-0xa(%rbp)

129	    cout << "ret:"<<ret<<endl;
   0x00005555555549ae <+52>:	lea    0x5aa(%rip),%rsi        # 0x555555554f5f
   0x00005555555549b5 <+59>:	lea    0x201664(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x00005555555549bc <+66>:	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x00005555555549c1 <+71>:	mov    %rax,%rdx
   0x00005555555549c4 <+74>:	movzbl -0xa(%rbp),%eax
   0x00005555555549c8 <+78>:	mov    %eax,%esi
   0x00005555555549ca <+80>:	mov    %rdx,%rdi
   0x00005555555549cd <+83>:	callq  0x555555554850 <_ZNSolsEb@plt>
   0x00005555555549d2 <+88>:	mov    %rax,%rdx
   0x00005555555549d5 <+91>:	mov    0x2015f4(%rip),%rax        # 0x555555755fd0
   0x00005555555549dc <+98>:	mov    %rax,%rsi
   0x00005555555549df <+101>:	mov    %rdx,%rdi
   0x00005555555549e2 <+104>:	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>

130	    bool ret1=sln.isMatch("aa","*");
   0x00005555555549e7 <+109>:	lea    -0xb(%rbp),%rax
   0x00005555555549eb <+113>:	lea    0x572(%rip),%rdx        # 0x555555554f64
   0x00005555555549f2 <+120>:	lea    0x56d(%rip),%rsi        # 0x555555554f66
   0x00005555555549f9 <+127>:	mov    %rax,%rdi
   0x00005555555549fc <+130>:	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x0000555555554a01 <+135>:	mov    %al,-0x9(%rbp)

131	    cout << "ret1:"<<ret1<<endl;
   0x0000555555554a04 <+138>:	lea    0x55e(%rip),%rsi        # 0x555555554f69
   0x0000555555554a0b <+145>:	lea    0x20160e(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x0000555555554a12 <+152>:	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x0000555555554a17 <+157>:	mov    %rax,%rdx
   0x0000555555554a1a <+160>:	movzbl -0x9(%rbp),%eax
   0x0000555555554a1e <+164>:	mov    %eax,%esi
   0x0000555555554a20 <+166>:	mov    %rdx,%rdi
   0x0000555555554a23 <+169>:	callq  0x555555554850 <_ZNSolsEb@plt>
   0x0000555555554a28 <+174>:	mov    %rax,%rdx
   0x0000555555554a2b <+177>:	mov    0x20159e(%rip),%rax        # 0x555555755fd0
   0x0000555555554a32 <+184>:	mov    %rax,%rsi
   0x0000555555554a35 <+187>:	mov    %rdx,%rdi
   0x0000555555554a38 <+190>:	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>

132	
133	}
   0x0000555555554a3d <+195>:	mov    $0x0,%eax
   0x0000555555554a42 <+200>:	mov    -0x8(%rbp),%rcx
   0x0000555555554a46 <+204>:	xor    %fs:0x28,%rcx
   0x0000555555554a4f <+213>:	je     0x555555554a56 <main()+220>
   0x0000555555554a51 <+215>:	callq  0x555555554830 <__stack_chk_fail@plt>
   0x0000555555554a56 <+220>:	leaveq 
   0x0000555555554a57 <+221>:	retq   

125	int main(){
   0x000055555555497a <+0>:	push   %rbp
   0x000055555555497b <+1>:	mov    %rsp,%rbp
   0x000055555555497e <+4>:	sub    $0x10,%rsp
   0x0000555555554982 <+8>:	mov    %fs:0x28,%rax
   0x000055555555498b <+17>:	mov    %rax,-0x8(%rbp)
   0x000055555555498f <+21>:	xor    %eax,%eax

126	    Solution sln;
127	    /* bool ret=sln.isMatch("adcab","*ab"); */
128	    bool ret=sln.isMatch("adcab","*ab");
=> 0x0000555555554991 <+23>:	lea    -0xb(%rbp),%rax
   0x0000555555554995 <+27>:	lea    0x5b9(%rip),%rdx        # 0x555555554f55
   0x000055555555499c <+34>:	lea    0x5b6(%rip),%rsi        # 0x555555554f59
   0x00005555555549a3 <+41>:	mov    %rax,%rdi
   0x00005555555549a6 <+44>:	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x00005555555549ab <+49>:	mov    %al,-0xa(%rbp)

129	    cout << "ret:"<<ret<<endl;
   0x00005555555549ae <+52>:	lea    0x5aa(%rip),%rsi        # 0x555555554f5f
   0x00005555555549b5 <+59>:	lea    0x201664(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x00005555555549bc <+66>:	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x00005555555549c1 <+71>:	mov    %rax,%rdx
   0x00005555555549c4 <+74>:	movzbl -0xa(%rbp),%eax
   0x00005555555549c8 <+78>:	mov    %eax,%esi
   0x00005555555549ca <+80>:	mov    %rdx,%rdi
   0x00005555555549cd <+83>:	callq  0x555555554850 <_ZNSolsEb@plt>
   0x00005555555549d2 <+88>:	mov    %rax,%rdx
   0x00005555555549d5 <+91>:	mov    0x2015f4(%rip),%rax        # 0x555555755fd0
   0x00005555555549dc <+98>:	mov    %rax,%rsi
   0x00005555555549df <+101>:	mov    %rdx,%rdi
   0x00005555555549e2 <+104>:	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>

130	    bool ret1=sln.isMatch("aa","*");
   0x00005555555549e7 <+109>:	lea    -0xb(%rbp),%rax
   0x00005555555549eb <+113>:	lea    0x572(%rip),%rdx        # 0x555555554f64
   0x00005555555549f2 <+120>:	lea    0x56d(%rip),%rsi        # 0x555555554f66
   0x00005555555549f9 <+127>:	mov    %rax,%rdi
   0x00005555555549fc <+130>:	callq  0x555555554ab6 <Solution::isMatch(char const*, char const*)>
   0x0000555555554a01 <+135>:	mov    %al,-0x9(%rbp)

131	    cout << "ret1:"<<ret1<<endl;
   0x0000555555554a04 <+138>:	lea    0x55e(%rip),%rsi        # 0x555555554f69
   0x0000555555554a0b <+145>:	lea    0x20160e(%rip),%rdi        # 0x555555756020 <_ZSt4cout@@GLIBCXX_3.4>
   0x0000555555554a12 <+152>:	callq  0x555555554810 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt>
   0x0000555555554a17 <+157>:	mov    %rax,%rdx
   0x0000555555554a1a <+160>:	movzbl -0x9(%rbp),%eax
   0x0000555555554a1e <+164>:	mov    %eax,%esi
   0x0000555555554a20 <+166>:	mov    %rdx,%rdi
   0x0000555555554a23 <+169>:	callq  0x555555554850 <_ZNSolsEb@plt>
   0x0000555555554a28 <+174>:	mov    %rax,%rdx
   0x0000555555554a2b <+177>:	mov    0x20159e(%rip),%rax        # 0x555555755fd0
   0x0000555555554a32 <+184>:	mov    %rax,%rsi
   0x0000555555554a35 <+187>:	mov    %rdx,%rdi
   0x0000555555554a38 <+190>:	callq  0x555555554820 <_ZNSolsEPFRSoS_E@plt>

132	
133	}
   0x0000555555554a3d <+195>:	mov    $0x0,%eax
   0x0000555555554a42 <+200>:	mov    -0x8(%rbp),%rcx
   0x0000555555554a46 <+204>:	xor    %fs:0x28,%rcx
   0x0000555555554a4f <+213>:	je     0x555555554a56 <main()+220>
   0x0000555555554a51 <+215>:	callq  0x555555554830 <__stack_chk_fail@plt>
   0x0000555555554a56 <+220>:	leaveq 
   0x0000555555554a57 <+221>:	retq   

&"complete \n"
~"!\n"
~"+\n"
~"-\n"
~"<\n"
~">\n"
~"actions\n"
~"add-auto-load-safe-path\n"
~"add-auto-load-scripts-directory\n"
~"add-inferior\n"
~"add-symbol-file\n"
~"add-symbol-file-from-memory\n"
~"advance\n"
~"agent-printf\n"
~"alias\n"
~"append\n"
~"apropos\n"
~"attach\n"
~"awatch\n"
~"backtrace\n"
~"bookmark\n"
~"break\n"
~"break-range\n"
~"bt\n"
~"call\n"
~"catch\n"
~"cd\n"
~"checkpoint\n"
~"clear\n"
~"clone-inferior\n"
~"collect\n"
~"commands\n"
~"compare-sections\n"
~"compile\n"
~"complete\n"
~"condition\n"
~"continue\n"
~"core-file\n"
~"define\n"
~"delete\n"
~"demangle\n"
~"detach\n"
~"directory\n"
~"disable\n"
~"disassemble\n"
~"disconnect\n"
~"display\n"
~"document\n"
~"dont-repeat\n"
~"down\n"
~"down-silently\n"
~"downbp\n"
~"dprintf\n"
~"dump\n"
~"echo\n"
~"edit\n"
~"enable\n"
~"end\n"
~"eval\n"
~"exec-file\n"
~"explore\n"
~"expression\n"
~"file\n"
~"find\n"
~"finish\n"
~"flash-erase\n"
~"flushregs\n"
~"focus\n"
~"forward-search\n"
~"frame\n"
~"fs\n"
~"ftrace\n"
~"function\n"
~"generate-core-file\n"
~"goto-bookmark\n"
~"guile\n"
~"guile-repl\n"
~"handle\n"
~"hbreak\n"
~"help\n"
~"if\n"
~"ignore\n"
~"inferior\n"
~"info\n"
~"init-if-undefined\n"
~"interpreter-exec\n"
~"interrupt\n"
~"jit-reader-load\n"
~"jit-reader-unload\n"
~"jump\n"
~"kill\n"
~"layout\n"
~"list\n"
~"load\n"
~"loadbp\n"
~"macro\n"
~"maintenance\n"
~"make\n"
~"mem\n"
~"monitor\n"
~"myloop_print\n"
~"new-ui\n"
~"next\n"
~"nexti\n"
~"ni\n"
~"nosharedlibrary\n"
~"output\n"
~"overlay\n"
~"passcount\n"
~"path\n"
~"pbitset\n"
~"pdequeue\n"
~"plist\n"
~"plist_member\n"
~"plistnode\n"
~"pmap\n"
~"pmap_member\n"
~"ppqueue\n"
~"pqueue\n"
~"print\n"
~"print-object\n"
~"printf\n"
~"pset\n"
~"pstack\n"
~"pstring\n"
~"ptype\n"
~"pvector\n"
~"pwd\n"
~"pwstring\n"
~"python\n"
~"python-interactive\n"
~"qbp\n"
~"queue-signal\n"
~"quit\n"
~"rbreak\n"
~"rc\n"
~"record\n"
~"refresh\n"
~"remote\n"
~"remove-inferiors\n"
~"remove-symbol-file\n"
~"restart\n"
~"restore\n"
~"return\n"
~"reverse-continue\n"
~"reverse-finish\n"
~"reverse-next\n"
~"reverse-nexti\n"
~"reverse-search\n"
~"reverse-step\n"
~"reverse-stepi\n"
~"rni\n"
~"rsi\n"
~"run\n"
~"rwatch\n"
~"save\n"
~"search\n"
~"section\n"
~"select-frame\n"
~"set\n"
~"sharedlibrary\n"
~"shell\n"
~"show\n"
~"si\n"
~"signal\n"
~"skip\n"
~"source\n"
~"start\n"
~"starti\n"
~"step\n"
~"stepi\n"
~"stepping\n"
~"stop\n"
~"strace\n"
~"symbol-file\n"
~"tabset\n"
~"target\n"
~"task\n"
~"tbreak\n"
~"tcatch\n"
~"tdump\n"
~"teval\n"
~"tfind\n"
~"thbreak\n"
~"thread\n"
~"tp\n"
~"trace\n"
~"tsave\n"
~"tstart\n"
~"tstatus\n"
~"tstop\n"
~"tty\n"
~"tui\n"
~"tvariable\n"
~"undisplay\n"
~"unset\n"
~"until\n"
~"up\n"
~"up-silently\n"
~"update\n"
~"watch\n"
~" *** List may be truncated, max-completions reached. ***\n"
^done
&"complete lay\n"
~"layout\n"
^done
&"complete file a.ou\n"
~"file a.out\n"
^done
~"\n\032\032frame-begin 0 0x555555554991\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554991",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000991",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:128"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555554991:\tlea    -0xb(%rbp),%rax\n"
~"   0x555555554995:\tlea    0x5b9(%rip),%rdx        # 0x555555554f55\n"
~"   0x55555555499c:\tlea    0x5b6(%rip),%rsi        # 0x555555554f59\n"
~"   0x5555555549a3:\tmov    %rax,%rdi\n"
~"   0x5555555549a6:\tcallq  0x555555554ab6\n"
~"   0x5555555549ab:\tmov    %al,-0xa(%rbp)\n"
~"   0x5555555549ae:\tlea    0x5aa(%rip),%rsi        # 0x555555554f5f\n"
~"   0x5555555549b5:\tlea    0x201664(%rip),%rdi        # 0x555555756020\n"
~"   0x5555555549bc:\tcallq  0x555555554810\n"
~"   0x5555555549c1:\tmov    %rax,%rdx\n"
~"   0x5555555549c4:\tmovzbl -0xa(%rbp),%eax\n"
~"   0x5555555549c8:\tmov    %eax,%esi\n"
~"   0x5555555549ca:\tmov    %rdx,%rdi\n"
~"   0x5555555549cd:\tcallq  0x555555554850\n"
~"   0x5555555549d2:\tmov    %rax,%rdx\n"
~"   0x5555555549d5:\tmov    0x2015f4(%rip),%rax        # 0x555555755fd0\n"
~"   0x5555555549dc:\tmov    %rax,%rsi\n"
~"   0x5555555549df:\tmov    %rdx,%rdi\n"
~"   0x5555555549e2:\tcallq  0x555555554820\n"
~"   0x5555555549e7:\tlea    -0xb(%rbp),%rax\n"
~"   0x5555555549eb:\tlea    0x572(%rip),%rdx        # 0x555555554f64\n"
~"   0x5555555549f2:\tlea    0x56d(%rip),%rsi        # 0x555555554f66\n"
~"   0x5555555549f9:\tmov    %rax,%rdi\n"
~"   0x5555555549fc:\tcallq  0x555555554ab6\n"
~"   0x555555554a01:\tmov    %al,-0x9(%rbp)\n"
~"   0x555555554a04:\tlea    0x55e(%rip),%rsi        # 0x555555554f69\n"
~"   0x555555554a0b:\tlea    0x20160e(%rip),%rdi        # 0x555555756020\n"
~"   0x555555554a12:\tcallq  0x555555554810\n"
~"   0x555555554a17:\tmov    %rax,%rdx\n"
~"   0x555555554a1a:\tmovzbl -0x9(%rbp),%eax\n"
~"   0x555555554a1e:\tmov    %eax,%esi\n"
~"   0x555555554a20:\tmov    %rdx,%rdi\n"
~"   0x555555554a23:\tcallq  0x555555554850\n"
~"   0x555555554a28:\tmov    %rax,%rdx\n"
~"   0x555555554a2b:\tmov    0x20159e(%rip),%rax        # 0x555555755fd0\n"
~"   0x555555554a32:\tmov    %rax,%rsi\n"
~"   0x555555554a35:\tmov    %rdx,%rdi\n"
~"   0x555555554a38:\tcallq  0x555555554820\n"
~"   0x555555554a3d:\tmov    $0x0,%eax\n"
~"   0x555555554a42:\tmov    -0x8(%rbp),%rcx\n"
~"   0x555555554a46:\txor    %fs:0x28,%rcx\n"
~"   0x555555554a4f:\tje     0x555555554a56\n"
~"   0x555555554a51:\tcallq  0x555555554830\n"
~"   0x555555554a56:\tleaveq \n"
~"   0x555555554a57:\tretq   \n"
~"   0x555555554a58:\tpush   %rbp\n"
~"   0x555555554a59:\tmov    %rsp,%rbp\n"
~"   0x555555554a5c:\tsub    $0x10,%rsp\n"
~"   0x555555554a60:\tmov    %edi,-0x4(%rbp)\n"
~"   0x555555554a63:\tmov    %esi,-0x8(%rbp)\n"
~"   0x555555554a66:\tcmpl   $0x1,-0x4(%rbp)\n"
~"   0x555555554a6a:\tjne    0x555555554a9e\n"
~"   0x555555554a6c:\tcmpl   $0xffff,-0x8(%rbp)\n"
~"   0x555555554a73:\tjne    0x555555554a9e\n"
~"   0x555555554a75:\tlea    0x2016b5(%rip),%rdi        # 0x555555756131\n"
~"   0x555555554a7c:\tcallq  0x555555554840\n"
~"   0x555555554a81:\tlea    0x201580(%rip),%rdx        # 0x555555756008\n"
~"   0x555555554a88:\tlea    0x2016a2(%rip),%rsi        # 0x555555756131\n"
~"   0x555555554a8f:\tmov    0x201562(%rip),%rax        # 0x555555755ff8\n"
~"   0x555555554a96:\tmov    %rax,%rdi\n"
~"   0x555555554a99:\tcallq  0x555555554800\n"
~"   0x555555554a9e:\tnop\n"
~"   0x555555554a9f:\tleaveq \n"
~"   0x555555554aa0:\tretq   \n"
~"   0x555555554aa1:\tpush   %rbp\n"
~"   0x555555554aa2:\tmov    %rsp,%rbp\n"
~"   0x555555554aa5:\tmov    $0xffff,%esi\n"
~"   0x555555554aaa:\tmov    $0x1,%edi\n"
~"   0x555555554aaf:\tcallq  0x555555554a58\n"
~"   0x555555554ab4:\tpop    %rbp\n"
~"   0x555555554ab5:\tretq   \n"
~"   0x555555554ab6:\tpush   %rbp\n"
~"   0x555555554ab7:\tmov    %rsp,%rbp\n"
~"   0x555555554aba:\tmov    %rdi,-0x48(%rbp)\n"
~"   0x555555554abe:\tmov    %rsi,-0x50(%rbp)\n"
~"   0x555555554ac2:\tmov    %rdx,-0x58(%rbp)\n"
~"   0x555555554ac6:\tmov    -0x58(%rbp),%rax\n"
~"   0x555555554aca:\tmov    %rax,-0x30(%rbp)\n"
~"   0x555555554ace:\tmov    -0x58(%rbp),%rax\n"
~"   0x555555554ad2:\tmov    %rax,-0x28(%rbp)\n"
~"   0x555555554ad6:\tmov    -0x50(%rbp),%rax\n"
~"   0x555555554ada:\tmov    %rax,-0x18(%rbp)\n"
~"   0x555555554ade:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554ae2:\tmovzbl (%rax),%eax\n"
~"   0x555555554ae5:\tcmp    $0x2a,%al\n"
~"   0x555555554ae7:\tjne    0x555555554aef\n"
~"   0x555555554ae9:\tmovb   $0x1,-0x32(%rbp)\n"
~"   0x555555554aed:\tjmp    0x555555554af3\n"
~"   0x555555554aef:\tmovb   $0x0,-0x32(%rbp)\n"
~"   0x555555554af3:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554af7:\tmovzbl (%rax),%eax\n"
~"   0x555555554afa:\ttest   %al,%al\n"
~"   0x555555554afc:\tje     0x555555554b10\n"
~"   0x555555554afe:\tmov    -0x30(%rbp),%rax\n"
~"   0x555555554b02:\tmovzbl (%rax),%eax\n"
~"   0x555555554b05:\tcmp    $0x2a,%al\n"
~"   0x555555554b07:\tjne    0x555555554b10\n"
~"   0x555555554b09:\taddq   $0x1,-0x30(%rbp)\n"
~"   0x555555554b0e:\tjmp    0x555555554af3\n"
~"   0x555555554b10:\tmov    -0x30(%rbp),%rax\n"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 1, main () at solution.cpp:128
~"\n\032\032frame-begin 0 0x555555554991\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554991",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554991",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:128"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 1, main () at solution.cpp:128
~"\n\032\032frame-begin 0 0x555555554991\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554991",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554991",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:128"}]}
Solution::isMatch (this=0x7fffffffdb05, s=0x555555554f5a "adcab", p=0x555555554f55 "**ab") at solution.cpp:12
~"\n\032\032frame-begin 0 0x555555554ac6\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554ac6",func="Solution::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="12"}
^done
&"complete file a.ou\n"
~"file a.out\n"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]"},original-location="solution.cpp:135"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 1, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]"},original-location="solution.cpp:135"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]"},original-location="solution.cpp:135"},bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 3, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="4",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,\\tsi-1=%d,\\ti=%d,\\tsi=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,\\tpj-1=%d,\\tj=%d,\\tpj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 3, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="4",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,\\tsi-1=%d,\\ti=%d,\\tsi=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,\\tpj-1=%d,\\tj=%d,\\tpj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="5",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,\\tsi-1=%d,\\ti=%d,\\tsi=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,\\tpj-1=%d,\\tj=%d,\\tpj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 5, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="5",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,\\tsi-1=%d,\\ti=%d,\\tsi=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,\\tpj-1=%d,\\tj=%d,\\tpj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",original-location="solution.cpp:135"}]}
~"\n\032\032frame-begin 0 0x555555555be5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555be5",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="136"}
~"\n\032\032frame-begin 0 0x555555555dd1\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555dd1",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="133"}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",original-location="solution.cpp:135"}]}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="2",original-location="solution.cpp:135"}]}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="3",original-location="solution.cpp:135"}]}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="4",original-location="solution.cpp:135"}]}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="6",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="5",original-location="solution.cpp:135"}]}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="6",original-location="solution.cpp:135"}]}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="8",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="7",original-location="solution.cpp:135"}]}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="9",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="8",original-location="solution.cpp:135"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="9",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="8",original-location="solution.cpp:135"},bkpt={number="8",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"}]}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="10",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="9",original-location="solution.cpp:135"},bkpt={number="8",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="10",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="9",original-location="solution.cpp:135"},bkpt={number="8",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="9",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="10",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="9",original-location="solution.cpp:135"}]}

Breakpoint 6, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="11",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="10",original-location="solution.cpp:135"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032frame-begin 0 0x555555555be5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555be5",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="136"}
~"\n\032\032frame-begin 0 0x555555555bf2\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555bf2",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
[Inferior 1 (process 6334) exited normally]
^error,msg="No registers."
^done,line="137",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 10, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="**ab") at solution.cpp:146
~"\n\032\032frame-begin 0 0x555555555de9\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555de9",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
&"complete file a.ou\n"
~"file a.out\n"
^done
~"\n\032\032frame-begin 0 0x555555555de9\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555de9",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555555de9:\tmov    -0x84(%rbp),%eax\n"
~"   0x555555555def:\tmovslq %eax,%rbx\n"
~"   0x555555555df2:\tmov    -0x88(%rbp),%eax\n"
~"   0x555555555df8:\tmovslq %eax,%rdx\n"
~"   0x555555555dfb:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555dff:\tmov    %rdx,%rsi\n"
~"   0x555555555e02:\tmov    %rax,%rdi\n"
~"   0x555555555e05:\tcallq  0x5555555560fc\n"
~"   0x555555555e0a:\tmov    %rbx,%rsi\n"
~"   0x555555555e0d:\tmov    %rax,%rdi\n"
~"   0x555555555e10:\tcallq  0x555555556126\n"
~"   0x555555555e15:\tmov    %rax,-0x40(%rbp)\n"
~"   0x555555555e19:\tmov    %rdx,-0x38(%rbp)\n"
~"   0x555555555e1d:\tlea    -0x40(%rbp),%rax\n"
~"   0x555555555e21:\tmov    %rax,%rdi\n"
~"   0x555555555e24:\tcallq  0x555555555194\n"
~"   0x555555555e29:\tmov    %eax,%ebx\n"
~"   0x555555555e2b:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555e2f:\tmov    %rax,%rdi\n"
~"   0x555555555e32:\tcallq  0x5555555560b8\n"
~"   0x555555555e37:\tmov    %ebx,%eax\n"
~"   0x555555555e39:\tmov    -0x18(%rbp),%rcx\n"
~"   0x555555555e3d:\txor    %fs:0x28,%rcx\n"
~"   0x555555555e46:\tje     0x555555555ea3\n"
~"   0x555555555e48:\tjmp    0x555555555e9e\n"
~"   0x555555555e4a:\tmov    %rax,%rbx\n"
~"   0x555555555e4d:\tlea    -0x40(%rbp),%rax\n"
~"   0x555555555e51:\tmov    %rax,%rdi\n"
~"   0x555555555e54:\tcallq  0x555555555ffa\n"
~"   0x555555555e59:\tmov    %rbx,%rax\n"
~"   0x555555555e5c:\tjmp    0x555555555e5e\n"
~"   0x555555555e5e:\tmov    %rax,%rbx\n"
~"   0x555555555e61:\tlea    -0x80(%rbp),%rax\n"
~"   0x555555555e65:\tmov    %rax,%rdi\n"
~"   0x555555555e68:\tcallq  0x555555555f18\n"
~"   0x555555555e6d:\tlea    -0x70(%rbp),%rax\n"
~"   0x555555555e71:\tmov    %rax,%rdi\n"
~"   0x555555555e74:\tcallq  0x555555556032\n"
~"   0x555555555e79:\tmov    %rbx,%rax\n"
~"   0x555555555e7c:\tmov    %rax,%rdi\n"
~"   0x555555555e7f:\tcallq  0x555555554df0\n"
~"   0x555555555e84:\tmov    %rax,%rbx\n"
~"   0x555555555e87:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555e8b:\tmov    %rax,%rdi\n"
~"   0x555555555e8e:\tcallq  0x5555555560b8\n"
~"   0x555555555e93:\tmov    %rbx,%rax\n"
~"   0x555555555e96:\tmov    %rax,%rdi\n"
~"   0x555555555e99:\tcallq  0x555555554df0\n"
~"   0x555555555e9e:\tcallq  0x555555554d80\n"
~"   0x555555555ea3:\tadd    $0xb0,%rsp\n"
~"   0x555555555eaa:\tpop    %rbx\n"
~"   0x555555555eab:\tpop    %r12\n"
~"   0x555555555ead:\tpop    %rbp\n"
~"   0x555555555eae:\tretq   \n"
~"   0x555555555eaf:\tpush   %rbp\n"
~"   0x555555555eb0:\tmov    %rsp,%rbp\n"
~"   0x555555555eb3:\tpush   %rbx\n"
~"   0x555555555eb4:\tsub    $0x28,%rsp\n"
~"   0x555555555eb8:\tmov    %rdi,-0x18(%rbp)\n"
~"   0x555555555ebc:\tmov    %rsi,-0x20(%rbp)\n"
~"   0x555555555ec0:\tmov    %rdx,-0x28(%rbp)\n"
~"   0x555555555ec4:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555555ec8:\tmov    %rax,%rdi\n"
~"   0x555555555ecb:\tcallq  0x555555556195\n"
~"   0x555555555ed0:\tmov    %rax,%rbx\n"
~"   0x555555555ed3:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555555ed7:\tmov    %rax,%rdi\n"
~"   0x555555555eda:\tcallq  0x555555556195\n"
~"   0x555555555edf:\tmov    %rax,%rcx\n"
~"   0x555555555ee2:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555ee6:\tmov    %rax,%rdx\n"
~"   0x555555555ee9:\tmov    %rbx,%rsi\n"
~"   0x555555555eec:\tmov    %rcx,%rdi\n"
~"   0x555555555eef:\tcallq  0x5555555561a3\n"
~"   0x555555555ef4:\tnop\n"
~"   0x555555555ef5:\tadd    $0x28,%rsp\n"
~"   0x555555555ef9:\tpop    %rbx\n"
~"   0x555555555efa:\tpop    %rbp\n"
~"   0x555555555efb:\tretq   \n"
~"   0x555555555efc:\tpush   %rbp\n"
~"   0x555555555efd:\tmov    %rsp,%rbp\n"
~"   0x555555555f00:\tsub    $0x10,%rsp\n"
~"   0x555555555f04:\tmov    %rdi,-0x8(%rbp)\n"
~"   0x555555555f08:\tmov    -0x8(%rbp),%rax\n"
~"   0x555555555f0c:\tmov    %rax,%rdi\n"
~"   0x555555555f0f:\tcallq  0x5555555561de\n"
~"   0x555555555f14:\tnop\n"
~"   0x555555555f15:\tleaveq \n"
~"   0x555555555f16:\tretq   \n"
~"   0x555555555f17:\tnop\n"
~"   0x555555555f18:\tpush   %rbp\n"
~"   0x555555555f19:\tmov    %rsp,%rbp\n"
~"   0x555555555f1c:\tsub    $0x10,%rsp\n"
~"   0x555555555f20:\tmov    %rdi,-0x8(%rbp)\n"
~"   0x555555555f24:\tmov    -0x8(%rbp),%rax\n"
~"   0x555555555f28:\tmov    %rax,%rdi\n"
~"   0x555555555f2b:\tcallq  0x5555555561ea\n"
~"   0x555555555f30:\tnop\n"
~"   0x555555555f31:\tleaveq \n"
~"   0x555555555f32:\tretq   \n"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000f4a",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="0",original-location="main"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 12, main () at solution.cpp:149
~"\n\032\032frame-begin 0 0x555555554f53\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554f53",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554f53",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="1",original-location="main"}]}
~"\n\032\032frame-begin 0 0x555555554f53\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554f53",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000f4a",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="1",original-location="main"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555554f53:\tmov    %fs:0x28,%rax\n"
~"   0x555555554f5c:\tmov    %rax,-0x18(%rbp)\n"
~"   0x555555554f60:\txor    %eax,%eax\n"
~"   0x555555554f62:\tlea    -0x66(%rbp),%rax\n"
~"   0x555555554f66:\tlea    0x25e8(%rip),%rdx        # 0x555555557555\n"
~"   0x555555554f6d:\tlea    0x25e6(%rip),%rsi        # 0x55555555755a\n"
~"   0x555555554f74:\tmov    %rax,%rdi\n"
~"   0x555555554f77:\tcallq  0x5555555555d8\n"
~"   0x555555554f7c:\tmov    %al,-0x62(%rbp)\n"
~"   0x555555554f7f:\tlea    0x25da(%rip),%rsi        # 0x555555557560\n"
~"   0x555555554f86:\tlea    0x204093(%rip),%rdi        # 0x555555759020\n"
~"   0x555555554f8d:\tcallq  0x555555554d40\n"
~"   0x555555554f92:\tmov    %rax,%rdx\n"
~"   0x555555554f95:\tmovzbl -0x62(%rbp),%eax\n"
~"   0x555555554f99:\tmov    %eax,%esi\n"
~"   0x555555554f9b:\tmov    %rdx,%rdi\n"
~"   0x555555554f9e:\tcallq  0x555555554e10\n"
~"   0x555555554fa3:\tmov    %rax,%rdx\n"
~"   0x555555554fa6:\tmov    0x204023(%rip),%rax        # 0x555555758fd0\n"
~"   0x555555554fad:\tmov    %rax,%rsi\n"
~"   0x555555554fb0:\tmov    %rdx,%rdi\n"
~"   0x555555554fb3:\tcallq  0x555555554d60\n"
~"   0x555555554fb8:\tlea    -0x63(%rbp),%rax\n"
~"   0x555555554fbc:\tmov    %rax,%rdi\n"
~"   0x555555554fbf:\tcallq  0x555555554e00\n"
~"   0x555555554fc4:\tlea    -0x63(%rbp),%rdx\n"
~"   0x555555554fc8:\tlea    -0x40(%rbp),%rax\n"
~"   0x555555554fcc:\tlea    0x2592(%rip),%rsi        # 0x555555557565\n"
~"   0x555555554fd3:\tmov    %rax,%rdi\n"
~"   0x555555554fd6:\tcallq  0x555555554d90\n"
~"   0x555555554fdb:\tlea    -0x64(%rbp),%rax\n"
~"   0x555555554fdf:\tmov    %rax,%rdi\n"
~"   0x555555554fe2:\tcallq  0x555555554e00\n"
~"   0x555555554fe7:\tlea    -0x64(%rbp),%rdx\n"
~"   0x555555554feb:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555554fef:\tlea    0x2564(%rip),%rsi        # 0x55555555755a\n"
~"   0x555555554ff6:\tmov    %rax,%rdi\n"
~"   0x555555554ff9:\tcallq  0x555555554d90\n"
~"   0x555555554ffe:\tlea    -0x40(%rbp),%rdx\n"
~"   0x555555555002:\tlea    -0x60(%rbp),%rcx\n"
~"   0x555555555006:\tlea    -0x65(%rbp),%rax\n"
~"   0x55555555500a:\tmov    %rcx,%rsi\n"
~"   0x55555555500d:\tmov    %rax,%rdi\n"
~"   0x555555555010:\tcallq  0x5555555559e8\n"
~"   0x555555555015:\tmov    %al,-0x61(%rbp)\n"
~"   0x555555555018:\tlea    -0x60(%rbp),%rax\n"
~"   0x55555555501c:\tmov    %rax,%rdi\n"
~"   0x55555555501f:\tcallq  0x555555554d10\n"
~"   0x555555555024:\tlea    -0x64(%rbp),%rax\n"
~"   0x555555555028:\tmov    %rax,%rdi\n"
~"   0x55555555502b:\tcallq  0x555555554d70\n"
~"   0x555555555030:\tlea    -0x40(%rbp),%rax\n"
~"   0x555555555034:\tmov    %rax,%rdi\n"
~"   0x555555555037:\tcallq  0x555555554d10\n"
~"   0x55555555503c:\tlea    -0x63(%rbp),%rax\n"
~"   0x555555555040:\tmov    %rax,%rdi\n"
~"   0x555555555043:\tcallq  0x555555554d70\n"
~"   0x555555555048:\tlea    0x251b(%rip),%rsi        # 0x55555555756a\n"
~"   0x55555555504f:\tlea    0x203fca(%rip),%rdi        # 0x555555759020\n"
~"   0x555555555056:\tcallq  0x555555554d40\n"
~"   0x55555555505b:\tmov    %rax,%rdx\n"
~"   0x55555555505e:\tmovzbl -0x61(%rbp),%eax\n"
~"   0x555555555062:\tmov    %eax,%esi\n"
~"   0x555555555064:\tmov    %rdx,%rdi\n"
~"   0x555555555067:\tcallq  0x555555554e10\n"
~"   0x55555555506c:\tmov    %rax,%rdx\n"
~"   0x55555555506f:\tmov    0x203f5a(%rip),%rax        # 0x555555758fd0\n"
~"   0x555555555076:\tmov    %rax,%rsi\n"
~"   0x555555555079:\tmov    %rdx,%rdi\n"
~"   0x55555555507c:\tcallq  0x555555554d60\n"
~"   0x555555555081:\tmov    $0x0,%eax\n"
~"   0x555555555086:\tmov    -0x18(%rbp),%rcx\n"
~"   0x55555555508a:\txor    %fs:0x28,%rcx\n"
~"   0x555555555093:\tje     0x5555555550e4\n"
~"   0x555555555095:\tjmp    0x5555555550df\n"
~"   0x555555555097:\tmov    %rax,%rbx\n"
~"   0x55555555509a:\tlea    -0x60(%rbp),%rax\n"
~"   0x55555555509e:\tmov    %rax,%rdi\n"
~"   0x5555555550a1:\tcallq  0x555555554d10\n"
~"   0x5555555550a6:\tjmp    0x5555555550ab\n"
~"   0x5555555550a8:\tmov    %rax,%rbx\n"
~"   0x5555555550ab:\tlea    -0x64(%rbp),%rax\n"
~"   0x5555555550af:\tmov    %rax,%rdi\n"
~"   0x5555555550b2:\tcallq  0x555555554d70\n"
~"   0x5555555550b7:\tlea    -0x40(%rbp),%rax\n"
~"   0x5555555550bb:\tmov    %rax,%rdi\n"
~"   0x5555555550be:\tcallq  0x555555554d10\n"
~"   0x5555555550c3:\tjmp    0x5555555550c8\n"
~"   0x5555555550c5:\tmov    %rax,%rbx\n"
~"   0x5555555550c8:\tlea    -0x63(%rbp),%rax\n"
~"   0x5555555550cc:\tmov    %rax,%rdi\n"
~"   0x5555555550cf:\tcallq  0x555555554d70\n"
~"   0x5555555550d4:\tmov    %rbx,%rax\n"
~"   0x5555555550d7:\tmov    %rax,%rdi\n"
~"   0x5555555550da:\tcallq  0x555555554df0\n"
~"   0x5555555550df:\tcallq  0x555555554d80\n"
~"   0x5555555550e4:\tadd    $0x68,%rsp\n"
~"   0x5555555550e8:\tpop    %rbx\n"
~"   0x5555555550e9:\tpop    %rbp\n"
~"   0x5555555550ea:\tretq   \n"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 12, main () at solution.cpp:149
~"\n\032\032frame-begin 0 0x555555554f53\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554f53",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554f53",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="1",original-location="main"}]}
~"\n\032\032frame-begin 0 0x555555554f53\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554f53",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000000f4a",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="1",original-location="main"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 12, main () at solution.cpp:149
~"\n\032\032frame-begin 0 0x555555554f53\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554f53",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554f53",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="1",original-location="main"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 12, main () at solution.cpp:149
~"\n\032\032frame-begin 0 0x555555554f53\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554f53",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554f53",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="1",original-location="main"}]}
~"\n\032\032frame-begin 0 0x555555554f62\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554f62",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="153"}
~"\n\032\032frame-begin 0 0x555555554f7f\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554f7f",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="154"}
~"\n\032\032frame-begin 0 0x555555554fb8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554fb8",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="155"}
Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:128
~"\n\032\032frame-begin 0 0x555555555a0b\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555a0b",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="128"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554f53",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="1",original-location="main"},bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 12, main () at solution.cpp:149
~"\n\032\032frame-begin 0 0x555555554f53\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555554f53",func="main",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554f53",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="1",original-location="main"},bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"}]}

Breakpoint 11, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:146"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555554f53",func="main()",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="149",thread-groups=["i1"],times="1",original-location="main"},bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"}]}

Breakpoint 14, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:146
~"\n\032\032frame-begin 0 0x555555555de9\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555de9",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 14, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:146
~"\n\032\032frame-begin 0 0x555555555de9\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555de9",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"}]}
~"\n\032\032frame-begin 0 0x555555555e2b\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e2b",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="130"}
~"\n\032\032frame-begin 0 0x555555555e37\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e37",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 14, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:146
~"\n\032\032frame-begin 0 0x555555555de9\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555de9",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="146"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:134"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 15, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:134"}]}

Breakpoint 15, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555de9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="145",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:145"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="2",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:134"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 16, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}

Breakpoint 16, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555b67\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b67",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b67",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:135"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="6",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="8",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="1",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="8",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555555b39:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555b3f:\tsub    $0x1,%eax\n"
~"   0x555555555b42:\tmovslq %eax,%rdx\n"
~"   0x555555555b45:\tmov    -0xb8(%rbp),%rax\n"
~"   0x555555555b4c:\tmov    %rdx,%rsi\n"
~"   0x555555555b4f:\tmov    %rax,%rdi\n"
~"   0x555555555b52:\tcallq  0x555555554e20\n"
~"   0x555555555b57:\tmovzbl (%rax),%eax\n"
~"   0x555555555b5a:\tcmp    $0x2a,%al\n"
~"   0x555555555b5c:\tsete   %al\n"
~"   0x555555555b5f:\ttest   %al,%al\n"
~"   0x555555555b61:\tje     0x555555555cc8\n"
~"   0x555555555b67:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555b6d:\tsub    $0x1,%eax\n"
~"   0x555555555b70:\tmovslq %eax,%rbx\n"
~"   0x555555555b73:\tmov    -0x90(%rbp),%eax\n"
~"   0x555555555b79:\tmovslq %eax,%rdx\n"
~"   0x555555555b7c:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555b80:\tmov    %rdx,%rsi\n"
~"   0x555555555b83:\tmov    %rax,%rdi\n"
~"   0x555555555b86:\tcallq  0x5555555560fc\n"
~"   0x555555555b8b:\tmov    %rbx,%rsi\n"
~"   0x555555555b8e:\tmov    %rax,%rdi\n"
~"   0x555555555b91:\tcallq  0x555555556126\n"
~"   0x555555555b96:\tmov    %rax,-0x40(%rbp)\n"
~"   0x555555555b9a:\tmov    %rdx,-0x38(%rbp)\n"
~"   0x555555555b9e:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555ba4:\tmovslq %eax,%rbx\n"
~"   0x555555555ba7:\tmov    -0x90(%rbp),%eax\n"
~"   0x555555555bad:\tmovslq %eax,%rdx\n"
~"   0x555555555bb0:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555bb4:\tmov    %rdx,%rsi\n"
~"   0x555555555bb7:\tmov    %rax,%rdi\n"
~"   0x555555555bba:\tcallq  0x5555555560fc\n"
~"   0x555555555bbf:\tmov    %rbx,%rsi\n"
~"   0x555555555bc2:\tmov    %rax,%rdi\n"
~"   0x555555555bc5:\tcallq  0x555555556126\n"
~"   0x555555555bca:\tmov    %rax,-0x70(%rbp)\n"
~"   0x555555555bce:\tmov    %rdx,-0x68(%rbp)\n"
~"   0x555555555bd2:\tlea    -0x40(%rbp),%rdx\n"
~"   0x555555555bd6:\tlea    -0x70(%rbp),%rax\n"
~"   0x555555555bda:\tmov    %rdx,%rsi\n"
~"   0x555555555bdd:\tmov    %rax,%rdi\n"
~"   0x555555555be0:\tcallq  0x55555555521a\n"
~"   0x555555555be5:\tcmpl   $0x0,-0x90(%rbp)\n"
~"   0x555555555bec:\tjle    0x555555555dd1\n"
~"   0x555555555bf2:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555bf8:\tmovslq %eax,%rbx\n"
~"   0x555555555bfb:\tmov    -0x90(%rbp),%eax\n"
~"   0x555555555c01:\tsub    $0x1,%eax\n"
~"   0x555555555c04:\tmovslq %eax,%rdx\n"
~"   0x555555555c07:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555c0b:\tmov    %rdx,%rsi\n"
~"   0x555555555c0e:\tmov    %rax,%rdi\n"
~"   0x555555555c11:\tcallq  0x5555555560fc\n"
~"   0x555555555c16:\tmov    %rbx,%rsi\n"
~"   0x555555555c19:\tmov    %rax,%rdi\n"
~"   0x555555555c1c:\tcallq  0x555555556126\n"
~"   0x555555555c21:\tmov    %rax,-0x70(%rbp)\n"
~"   0x555555555c25:\tmov    %rdx,-0x68(%rbp)\n"
~"   0x555555555c29:\tlea    -0x70(%rbp),%rax\n"
~"   0x555555555c2d:\tmov    %rax,%rdi\n"
~"   0x555555555c30:\tcallq  0x555555555194\n"
~"   0x555555555c35:\tmov    %eax,%r12d\n"
~"   0x555555555c38:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555c3e:\tsub    $0x1,%eax\n"
~"   0x555555555c41:\tmovslq %eax,%rbx\n"
~"   0x555555555c44:\tmov    -0x90(%rbp),%eax\n"
~"   0x555555555c4a:\tmovslq %eax,%rdx\n"
~"   0x555555555c4d:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555c51:\tmov    %rdx,%rsi\n"
~"   0x555555555c54:\tmov    %rax,%rdi\n"
~"   0x555555555c57:\tcallq  0x5555555560fc\n"
~"   0x555555555c5c:\tmov    %rbx,%rsi\n"
~"   0x555555555c5f:\tmov    %rax,%rdi\n"
~"   0x555555555c62:\tcallq  0x555555556126\n"
~"   0x555555555c67:\tmov    %rax,-0x40(%rbp)\n"
~"   0x555555555c6b:\tmov    %rdx,-0x38(%rbp)\n"
~"   0x555555555c6f:\tlea    -0x40(%rbp),%rax\n"
~"   0x555555555c73:\tmov    %rax,%rdi\n"
~"   0x555555555c76:\tcallq  0x555555555194\n"
~"   0x555555555c7b:\tor     %r12d,%eax\n"
~"   0x555555555c7e:\tmovzbl %al,%ebx\n"
~"   0x555555555c81:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555c87:\tmovslq %eax,%r12\n"
~"   0x555555555c8a:\tmov    -0x90(%rbp),%eax\n"
~"   0x555555555c90:\tmovslq %eax,%rdx\n"
~"   0x555555555c93:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555c97:\tmov    %rdx,%rsi\n"
~"   0x555555555c9a:\tmov    %rax,%rdi\n"
~"   0x555555555c9d:\tcallq  0x5555555560fc\n"
~"   0x555555555ca2:\tmov    %r12,%rsi\n"
~"   0x555555555ca5:\tmov    %rax,%rdi\n"
~"   0x555555555ca8:\tcallq  0x555555556126\n"
~"   0x555555555cad:\tmov    %rax,-0x80(%rbp)\n"
~"   0x555555555cb1:\tmov    %rdx,-0x78(%rbp)\n"
~"   0x555555555cb5:\tlea    -0x80(%rbp),%rax\n"
~"   0x555555555cb9:\tmov    %ebx,%esi\n"
~"   0x555555555cbb:\tmov    %rax,%rdi\n"
~"   0x555555555cbe:\tcallq  0x5555555551ba\n"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="8",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}
&"complete file a.out\n"
~"file a.out\n"
^done
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="6",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="6",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="6",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}
~"\n\032\032frame-begin 0 0x555555555cc8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cc8",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="140"}
~"\n\032\032frame-begin 0 0x555555555d50\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d50",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="141"}
~"\n\032\032frame-begin 0 0x555555555dd1\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555dd1",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="133"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="6",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="6",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="6",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaab, s="adcab", p="*aab") at solution.cpp:134
~"\n\032\032frame-begin 0 0x555555555b39\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b39",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"}]}
~"\n\032\032frame-begin 0 0x555555555cc8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cc8",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="140"}
~"\n\032\032frame-begin 0 0x555555555cc8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cc8",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="140"}
~"\n\032\032frame-begin 0 0x555555555cc8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cc8",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="140"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b39",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="20",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555cc8",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="139",thread-groups=["i1"],times="0",original-location="solution.cpp:139"}]}
&"complete file a.\n"
~"file a.out\n"
^done
~"\n\032\032frame-begin 0 0x555555555cc8\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cc8",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="20",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001a23",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="139",thread-groups=["i1"],times="0",original-location="solution.cpp:139"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555555cc8:\tcmpl   $0x0,-0x90(%rbp)\n"
~"   0x555555555ccf:\tjle    0x555555555d43\n"
~"   0x555555555cd1:\tmov    -0x90(%rbp),%eax\n"
~"   0x555555555cd7:\tsub    $0x1,%eax\n"
~"   0x555555555cda:\tmovslq %eax,%rdx\n"
~"   0x555555555cdd:\tmov    -0xb0(%rbp),%rax\n"
~"   0x555555555ce4:\tmov    %rdx,%rsi\n"
~"   0x555555555ce7:\tmov    %rax,%rdi\n"
~"   0x555555555cea:\tcallq  0x555555554e20\n"
~"   0x555555555cef:\tmovzbl (%rax),%ebx\n"
~"   0x555555555cf2:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555cf8:\tsub    $0x1,%eax\n"
~"   0x555555555cfb:\tmovslq %eax,%rdx\n"
~"   0x555555555cfe:\tmov    -0xb8(%rbp),%rax\n"
~"   0x555555555d05:\tmov    %rdx,%rsi\n"
~"   0x555555555d08:\tmov    %rax,%rdi\n"
~"   0x555555555d0b:\tcallq  0x555555554e20\n"
~"   0x555555555d10:\tmovzbl (%rax),%eax\n"
~"   0x555555555d13:\tcmp    %al,%bl\n"
~"   0x555555555d15:\tje     0x555555555d3c\n"
~"   0x555555555d17:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555d1d:\tsub    $0x1,%eax\n"
~"   0x555555555d20:\tmovslq %eax,%rdx\n"
~"   0x555555555d23:\tmov    -0xb8(%rbp),%rax\n"
~"   0x555555555d2a:\tmov    %rdx,%rsi\n"
~"   0x555555555d2d:\tmov    %rax,%rdi\n"
~"   0x555555555d30:\tcallq  0x555555554e20\n"
~"   0x555555555d35:\tmovzbl (%rax),%eax\n"
~"   0x555555555d38:\tcmp    $0x3f,%al\n"
~"   0x555555555d3a:\tjne    0x555555555d43\n"
~"   0x555555555d3c:\tmov    $0x1,%eax\n"
~"   0x555555555d41:\tjmp    0x555555555d48\n"
~"   0x555555555d43:\tmov    $0x0,%eax\n"
~"   0x555555555d48:\ttest   %al,%al\n"
~"   0x555555555d4a:\tje     0x555555555dd1\n"
~"   0x555555555d50:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555d56:\tsub    $0x1,%eax\n"
~"   0x555555555d59:\tmovslq %eax,%rbx\n"
~"   0x555555555d5c:\tmov    -0x90(%rbp),%eax\n"
~"   0x555555555d62:\tsub    $0x1,%eax\n"
~"   0x555555555d65:\tmovslq %eax,%rdx\n"
~"   0x555555555d68:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555d6c:\tmov    %rdx,%rsi\n"
~"   0x555555555d6f:\tmov    %rax,%rdi\n"
~"   0x555555555d72:\tcallq  0x5555555560fc\n"
~"   0x555555555d77:\tmov    %rbx,%rsi\n"
~"   0x555555555d7a:\tmov    %rax,%rdi\n"
~"   0x555555555d7d:\tcallq  0x555555556126\n"
~"   0x555555555d82:\tmov    %rax,-0x40(%rbp)\n"
~"   0x555555555d86:\tmov    %rdx,-0x38(%rbp)\n"
~"   0x555555555d8a:\tmov    -0x8c(%rbp),%eax\n"
~"   0x555555555d90:\tmovslq %eax,%rbx\n"
~"   0x555555555d93:\tmov    -0x90(%rbp),%eax\n"
~"   0x555555555d99:\tmovslq %eax,%rdx\n"
~"   0x555555555d9c:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555da0:\tmov    %rdx,%rsi\n"
~"   0x555555555da3:\tmov    %rax,%rdi\n"
~"   0x555555555da6:\tcallq  0x5555555560fc\n"
~"   0x555555555dab:\tmov    %rbx,%rsi\n"
~"   0x555555555dae:\tmov    %rax,%rdi\n"
~"   0x555555555db1:\tcallq  0x555555556126\n"
~"   0x555555555db6:\tmov    %rax,-0x70(%rbp)\n"
~"   0x555555555dba:\tmov    %rdx,-0x68(%rbp)\n"
~"   0x555555555dbe:\tlea    -0x40(%rbp),%rdx\n"
~"   0x555555555dc2:\tlea    -0x70(%rbp),%rax\n"
~"   0x555555555dc6:\tmov    %rdx,%rsi\n"
~"   0x555555555dc9:\tmov    %rax,%rdi\n"
~"   0x555555555dcc:\tcallq  0x55555555521a\n"
~"   0x555555555dd1:\taddl   $0x1,-0x8c(%rbp)\n"
~"   0x555555555dd8:\tjmpq   0x555555555b27\n"
~"   0x555555555ddd:\taddl   $0x1,-0x90(%rbp)\n"
~"   0x555555555de4:\tjmpq   0x555555555b0b\n"
~"   0x555555555de9:\tmov    -0x84(%rbp),%eax\n"
~"   0x555555555def:\tmovslq %eax,%rbx\n"
~"   0x555555555df2:\tmov    -0x88(%rbp),%eax\n"
~"   0x555555555df8:\tmovslq %eax,%rdx\n"
~"   0x555555555dfb:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555dff:\tmov    %rdx,%rsi\n"
~"   0x555555555e02:\tmov    %rax,%rdi\n"
~"   0x555555555e05:\tcallq  0x5555555560fc\n"
~"   0x555555555e0a:\tmov    %rbx,%rsi\n"
~"   0x555555555e0d:\tmov    %rax,%rdi\n"
~"   0x555555555e10:\tcallq  0x555555556126\n"
~"   0x555555555e15:\tmov    %rax,-0x40(%rbp)\n"
~"   0x555555555e19:\tmov    %rdx,-0x38(%rbp)\n"
~"   0x555555555e1d:\tlea    -0x40(%rbp),%rax\n"
~"   0x555555555e21:\tmov    %rax,%rdi\n"
~"   0x555555555e24:\tcallq  0x555555555194\n"
~"   0x555555555e29:\tmov    %eax,%ebx\n"
~"   0x555555555e2b:\tlea    -0x60(%rbp),%rax\n"
~"   0x555555555e2f:\tmov    %rax,%rdi\n"
~"   0x555555555e32:\tcallq  0x5555555560b8\n"
~"   0x555555555e37:\tmov    %ebx,%eax\n"
~"   0x555555555e39:\tmov    -0x18(%rbp),%rcx\n"
~"   0x555555555e3d:\txor    %fs:0x28,%rcx\n"
~"   0x555555555e46:\tje     0x555555555ea3\n"
~"   0x555555555e48:\tjmp    0x555555555e9e\n"
~"   0x555555555e4a:\tmov    %rax,%rbx\n"
~"   0x555555555e4d:\tlea    -0x40(%rbp),%rax\n"
~"   0x555555555e51:\tmov    %rax,%rdi\n"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="6",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="20",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001a23",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="139",thread-groups=["i1"],times="0",original-location="solution.cpp:139"},bkpt={number="21",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="22",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,1j"},original-location="solution.cpp:157"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="6",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="20",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001a23",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="139",thread-groups=["i1"],times="0",original-location="solution.cpp:139"},bkpt={number="21",type="breakpoint",disp="keep",enabled="n",addr="0x0000000000001885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="22",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,1j"},original-location="solution.cpp:157"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 17, Solution2::isMatch (this=0x7fffffffdaaa, s="adcab", p="*aab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555885\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555885",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="6",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="17",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="18",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="19",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="20",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555a23",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="139",thread-groups=["i1"],times="0",original-location="solution.cpp:139"},bkpt={number="21",type="breakpoint",disp="keep",enabled="n",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="22",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,1j"},original-location="solution.cpp:157"}]}
~"\n\032\032frame-begin 0 0x5555555558a1\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555558a1",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="136"}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="23",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="24",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,1j"},original-location="solution.cpp:157"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="23",type="breakpoint",disp="keep",enabled="n",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="24",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,1j"},original-location="solution.cpp:157"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 24, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="23",type="breakpoint",disp="keep",enabled="n",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="24",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,1j"},original-location="solution.cpp:157"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="23",type="breakpoint",disp="keep",enabled="n",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="24",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,1j"},original-location="solution.cpp:157"},bkpt={number="25",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="26",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="27",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans"},original-location="solution.cpp:134"},bkpt={number="28",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="29",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","continue"},original-location="solution.cpp:134"},bkpt={number="30",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 29, Solution2::isMatch (this=0x7fffffffdaaa, s="adcab", p="*aab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555885\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555885",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="29",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","continue"},original-location="solution.cpp:134"},bkpt={number="30",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="31",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","continue"},original-location="solution.cpp:134"},bkpt={number="32",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 31, Solution2::isMatch (this=0x7fffffffdaaa, s="adcab", p="*aab") at solution.cpp:135
~"\n\032\032frame-begin 0 0x555555555885\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555885",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="31",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","continue"},original-location="solution.cpp:134"},bkpt={number="32",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="33",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","continue"},original-location="solution.cpp:134"},bkpt={number="34",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
~"\n\032\032frame-begin 0 0x555555555885\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555885",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="33",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","continue"},original-location="solution.cpp:134"},bkpt={number="34",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="35",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="0",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:134"},bkpt={number="36",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
~"\n\032\032frame-begin 0 0x555555555885\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555885",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="35",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:134"},bkpt={number="36",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}

Breakpoint 36, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="35",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:134"},bkpt={number="36",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
~"\n\032\032frame-begin 0 0x555555555885\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555885",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="135"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="35",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555885",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="134",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:134"},bkpt={number="36",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="0",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032frame-begin 0 0x555555555c7e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c7e",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="159"}
~"\n\032\032frame-begin 0 0x555555555c84\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c84",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="160"}
~"\n\032\032frame-begin 0 0x555555555c51\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c51",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="155"}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032frame-begin 0 0x555555555c7e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c7e",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="159"}
~"\n\032\032frame-begin 0 0x555555555c84\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c84",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="160"}
~"\n\032\032frame-begin 0 0x555555555c51\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c51",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="155"}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032frame-begin 0 0x555555555c92\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c92",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="162"}
~"\n\032\032frame-begin 0 0x555555555cff\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cff",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="166"}
~"\n\032\032frame-begin 0 0x555555555d05\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d05",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="168"}
~"\n\032\032frame-begin 0 0x555555555d0f\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d0f",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="169"}
~"\n\032\032frame-begin 0 0x555555555c51\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c51",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="155"}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032frame-begin 0 0x555555555c92\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c92",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="162"}
~"\n\032\032frame-begin 0 0x555555555cff\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cff",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="166"}
~"\n\032\032frame-begin 0 0x555555555d05\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d05",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="168"}
~"\n\032\032frame-begin 0 0x555555555d0f\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d0f",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="169"}
~"\n\032\032frame-begin 0 0x555555555c51\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c51",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="155"}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032frame-begin 0 0x555555555c92\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c92",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="162"}
~"\n\032\032frame-begin 0 0x555555555cff\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cff",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="166"}
~"\n\032\032frame-begin 0 0x555555555d05\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d05",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="168"}
~"\n\032\032frame-begin 0 0x555555555d0f\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d0f",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="169"}
~"\n\032\032frame-begin 0 0x555555555c51\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c51",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="155"}
[Inferior 1 (process 7097) exited normally]
^error,msg="No registers."
^done,line="155",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032frame-begin 0 0x555555555c92\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c92",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="162"}
~"\n\032\032frame-begin 0 0x555555555cff\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cff",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="166"}
~"\n\032\032frame-begin 0 0x555555555d05\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d05",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="168"}
~"\n\032\032frame-begin 0 0x555555555d0f\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d0f",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="169"}
~"\n\032\032frame-begin 0 0x555555555c51\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c51",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="155"}
~"\n\032\032frame-begin 0 0x555555555d24\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d24",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="174"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032frame-begin 0 0x555555555c7e\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c7e",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="159"}
~"\n\032\032frame-begin 0 0x555555555c84\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c84",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="160"}
~"\n\032\032frame-begin 0 0x555555555c51\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c51",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="155"}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}

Breakpoint 38, Solution3::isMatch (this=0x7fffffffdaab, s="bbb", p="**cd") at solution.cpp:157
~"\n\032\032frame-begin 0 0x555555555c5d\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c5d",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="2",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="37",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555558bd",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="38",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c5d",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj"},original-location="solution.cpp:157"}]}
[Inferior 1 (process 7152) exited normally]
^error,msg="No registers."

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="192",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
[Inferior 1 (process 13656) exited normally]
^error,msg="No registers."
^done,line="192",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"
&"complete cou\n"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="0",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d29",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="153",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:153"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 3, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:153
~"\n\032\032frame-begin 0 0x555555555d29\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d29",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="153"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d29",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="153",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:153"}]}
&"complete file a.ou\n"
~"file a.out\n"
^done
~"\n\032\032frame-begin 0 0x555555555d29\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d29",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x00000000000019cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001d29",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="153",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:153"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555555d29:\tmov    -0x40(%rbp),%rax\n"
~"   0x555555555d2d:\tmov    %rax,%rdi\n"
~"   0x555555555d30:\tcallq  0x555555554d90\n"
~"   0x555555555d35:\tmov    %eax,-0x18(%rbp)\n"
~"   0x555555555d38:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555555d3c:\tmov    %rax,%rdi\n"
~"   0x555555555d3f:\tcallq  0x555555554d90\n"
~"   0x555555555d44:\tmov    %eax,-0x14(%rbp)\n"
~"   0x555555555d47:\tmovl   $0x0,-0x28(%rbp)\n"
~"   0x555555555d4e:\tmovl   $0x0,-0x24(%rbp)\n"
~"   0x555555555d55:\tmovl   $0xffffffff,-0x20(%rbp)\n"
~"   0x555555555d5c:\tmovl   $0xffffffff,-0x1c(%rbp)\n"
~"   0x555555555d63:\tmov    -0x28(%rbp),%eax\n"
~"   0x555555555d66:\tcmp    -0x18(%rbp),%eax\n"
~"   0x555555555d69:\tjge    0x555555555e36\n"
~"   0x555555555d6f:\tmov    -0x24(%rbp),%eax\n"
~"   0x555555555d72:\tmovslq %eax,%rdx\n"
~"   0x555555555d75:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555555d79:\tmov    %rdx,%rsi\n"
~"   0x555555555d7c:\tmov    %rax,%rdi\n"
~"   0x555555555d7f:\tcallq  0x555555554ea0\n"
~"   0x555555555d84:\tmovzbl (%rax),%eax\n"
~"   0x555555555d87:\tcmp    $0x2a,%al\n"
~"   0x555555555d89:\tsete   %al\n"
~"   0x555555555d8c:\ttest   %al,%al\n"
~"   0x555555555d8e:\tje     0x555555555da4\n"
~"   0x555555555d90:\tmov    -0x28(%rbp),%eax\n"
~"   0x555555555d93:\tmov    %eax,-0x20(%rbp)\n"
~"   0x555555555d96:\tmov    -0x24(%rbp),%eax\n"
~"   0x555555555d99:\tlea    0x1(%rax),%edx\n"
~"   0x555555555d9c:\tmov    %edx,-0x24(%rbp)\n"
~"   0x555555555d9f:\tmov    %eax,-0x1c(%rbp)\n"
~"   0x555555555da2:\tjmp    0x555555555d63\n"
~"   0x555555555da4:\tmov    -0x24(%rbp),%eax\n"
~"   0x555555555da7:\tmovslq %eax,%rdx\n"
~"   0x555555555daa:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555555dae:\tmov    %rdx,%rsi\n"
~"   0x555555555db1:\tmov    %rax,%rdi\n"
~"   0x555555555db4:\tcallq  0x555555554ea0\n"
~"   0x555555555db9:\tmovzbl (%rax),%eax\n"
~"   0x555555555dbc:\tcmp    $0x3f,%al\n"
~"   0x555555555dbe:\tje     0x555555555df4\n"
~"   0x555555555dc0:\tmov    -0x24(%rbp),%eax\n"
~"   0x555555555dc3:\tmovslq %eax,%rdx\n"
~"   0x555555555dc6:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555555dca:\tmov    %rdx,%rsi\n"
~"   0x555555555dcd:\tmov    %rax,%rdi\n"
~"   0x555555555dd0:\tcallq  0x555555554ea0\n"
~"   0x555555555dd5:\tmovzbl (%rax),%ebx\n"
~"   0x555555555dd8:\tmov    -0x28(%rbp),%eax\n"
~"   0x555555555ddb:\tmovslq %eax,%rdx\n"
~"   0x555555555dde:\tmov    -0x40(%rbp),%rax\n"
~"   0x555555555de2:\tmov    %rdx,%rsi\n"
~"   0x555555555de5:\tmov    %rax,%rdi\n"
~"   0x555555555de8:\tcallq  0x555555554ea0\n"
~"   0x555555555ded:\tmovzbl (%rax),%eax\n"
~"   0x555555555df0:\tcmp    %al,%bl\n"
~"   0x555555555df2:\tjne    0x555555555dfb\n"
~"   0x555555555df4:\tmov    $0x1,%eax\n"
~"   0x555555555df9:\tjmp    0x555555555e00\n"
~"   0x555555555dfb:\tmov    $0x0,%eax\n"
~"   0x555555555e00:\ttest   %al,%al\n"
~"   0x555555555e02:\tje     0x555555555e11\n"
~"   0x555555555e04:\taddl   $0x1,-0x28(%rbp)\n"
~"   0x555555555e08:\taddl   $0x1,-0x24(%rbp)\n"
~"   0x555555555e0c:\tjmpq   0x555555555d63\n"
~"   0x555555555e11:\tcmpl   $0x0,-0x1c(%rbp)\n"
~"   0x555555555e15:\tjs     0x555555555e2f\n"
~"   0x555555555e17:\taddl   $0x1,-0x20(%rbp)\n"
~"   0x555555555e1b:\tmov    -0x20(%rbp),%eax\n"
~"   0x555555555e1e:\tmov    %eax,-0x28(%rbp)\n"
~"   0x555555555e21:\tmov    -0x1c(%rbp),%eax\n"
~"   0x555555555e24:\tadd    $0x1,%eax\n"
~"   0x555555555e27:\tmov    %eax,-0x24(%rbp)\n"
~"   0x555555555e2a:\tjmpq   0x555555555d63\n"
~"   0x555555555e2f:\tmov    $0x0,%eax\n"
~"   0x555555555e34:\tjmp    0x555555555e79\n"
~"   0x555555555e36:\tmov    -0x24(%rbp),%eax\n"
~"   0x555555555e39:\tcmp    -0x14(%rbp),%eax\n"
~"   0x555555555e3c:\tjge    0x555555555e61\n"
~"   0x555555555e3e:\tmov    -0x24(%rbp),%eax\n"
~"   0x555555555e41:\tmovslq %eax,%rdx\n"
~"   0x555555555e44:\tmov    -0x48(%rbp),%rax\n"
~"   0x555555555e48:\tmov    %rdx,%rsi\n"
~"   0x555555555e4b:\tmov    %rax,%rdi\n"
~"   0x555555555e4e:\tcallq  0x555555554ea0\n"
~"   0x555555555e53:\tmovzbl (%rax),%eax\n"
~"   0x555555555e56:\tcmp    $0x2a,%al\n"
~"   0x555555555e58:\tjne    0x555555555e61\n"
~"   0x555555555e5a:\tmov    $0x1,%eax\n"
~"   0x555555555e5f:\tjmp    0x555555555e66\n"
~"   0x555555555e61:\tmov    $0x0,%eax\n"
~"   0x555555555e66:\ttest   %al,%al\n"
~"   0x555555555e68:\tje     0x555555555e70\n"
~"   0x555555555e6a:\taddl   $0x1,-0x24(%rbp)\n"
~"   0x555555555e6e:\tjmp    0x555555555e36\n"
~"   0x555555555e70:\tmov    -0x24(%rbp),%eax\n"
~"   0x555555555e73:\tcmp    -0x14(%rbp),%eax\n"
~"   0x555555555e76:\tsete   %al\n"
~"   0x555555555e79:\tadd    $0x48,%rsp\n"
^done
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="6",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x00000000000019cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001d29",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="153",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:153"},bkpt={number="4",type="breakpoint",disp="keep",enabled="y",addr="0x00000000000019cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="0",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="5",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000002108",func="Solution4::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:198"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 3, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:153
~"\n\032\032frame-begin 0 0x555555555d29\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d29",func="Solution3::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="153"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="6",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="1",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="2",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="3",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d29",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="153",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:153"},bkpt={number="4",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="5",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="6",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555556108",func="Solution4::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:198"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="0",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="8",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="9",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555556108",func="Solution4::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:198"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 8, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 8, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 8, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 8, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 8, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 9, Solution4::isMatch (this=0x7fffffffda9a, s="adcab", p="**ab") at solution.cpp:198
~"\n\032\032frame-begin 0 0x555555556108\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555556108",func="Solution4::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="7",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="8",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="9",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555556108",func="Solution4::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:198"}]}
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="0",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:180"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 11, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 11, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 11, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 11, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 11, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 12, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=0, pi=0) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="10",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="11",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="12",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->s=%s,si=%d\\n\",s,si","printf \"->p=%s,pi=%d\\n\",p,pi"},original-location="solution.cpp:180"}]}
&"complete \n"
~"!\n"
~"+\n"
~"-\n"
~"<\n"
~">\n"
~"actions\n"
~"add-auto-load-safe-path\n"
~"add-auto-load-scripts-directory\n"
~"add-inferior\n"
~"add-symbol-file\n"
~"add-symbol-file-from-memory\n"
~"advance\n"
~"agent-printf\n"
~"alias\n"
~"append\n"
~"apropos\n"
~"attach\n"
~"awatch\n"
~"backtrace\n"
~"bookmark\n"
~"break\n"
~"break-range\n"
~"bt\n"
~"call\n"
~"catch\n"
~"cd\n"
~"checkpoint\n"
~"clear\n"
~"clone-inferior\n"
~"collect\n"
~"commands\n"
~"compare-sections\n"
~"compile\n"
~"complete\n"
~"condition\n"
~"continue\n"
~"core-file\n"
~"define\n"
~"delete\n"
~"demangle\n"
~"detach\n"
~"directory\n"
~"disable\n"
~"disassemble\n"
~"disconnect\n"
~"display\n"
~"document\n"
~"dont-repeat\n"
~"down\n"
~"down-silently\n"
~"downbp\n"
~"dprintf\n"
~"dump\n"
~"echo\n"
~"edit\n"
~"enable\n"
~"end\n"
~"eval\n"
~"exec-file\n"
~"explore\n"
~"expression\n"
~"file\n"
~"find\n"
~"finish\n"
~"flash-erase\n"
~"flushregs\n"
~"focus\n"
~"forward-search\n"
~"frame\n"
~"fs\n"
~"ftrace\n"
~"function\n"
~"generate-core-file\n"
~"goto-bookmark\n"
~"guile\n"
~"guile-repl\n"
~"handle\n"
~"hbreak\n"
~"help\n"
~"if\n"
~"ignore\n"
~"inferior\n"
~"info\n"
~"init-if-undefined\n"
~"interpreter-exec\n"
~"interrupt\n"
~"jit-reader-load\n"
~"jit-reader-unload\n"
~"jump\n"
~"kill\n"
~"layout\n"
~"list\n"
~"load\n"
~"loadbp\n"
~"macro\n"
~"maintenance\n"
~"make\n"
~"mem\n"
~"monitor\n"
~"myloop_print\n"
~"new-ui\n"
~"next\n"
~"nexti\n"
~"ni\n"
~"nosharedlibrary\n"
~"output\n"
~"overlay\n"
~"passcount\n"
~"path\n"
~"pbitset\n"
~"pdequeue\n"
~"plist\n"
~"plist_member\n"
~"plistnode\n"
~"pmap\n"
~"pmap_member\n"
~"ppqueue\n"
~"pqueue\n"
~"print\n"
~"print-object\n"
~"printf\n"
~"pset\n"
~"pstack\n"
~"pstring\n"
~"ptype\n"
~"pvector\n"
~"pwd\n"
~"pwstring\n"
~"python\n"
~"python-interactive\n"
~"qbp\n"
~"queue-signal\n"
~"quit\n"
~"rbreak\n"
~"rc\n"
~"record\n"
~"refresh\n"
~"remote\n"
~"remove-inferiors\n"
~"remove-symbol-file\n"
~"restart\n"
~"restore\n"
~"return\n"
~"reverse-continue\n"
~"reverse-finish\n"
~"reverse-next\n"
~"reverse-nexti\n"
~"reverse-search\n"
~"reverse-step\n"
~"reverse-stepi\n"
~"rni\n"
~"rsi\n"
~"run\n"
~"rwatch\n"
~"save\n"
~"search\n"
~"section\n"
~"select-frame\n"
~"set\n"
~"sharedlibrary\n"
~"shell\n"
~"show\n"
~"si\n"
~"signal\n"
~"skip\n"
~"source\n"
~"start\n"
~"starti\n"
~"step\n"
~"stepi\n"
~"stepping\n"
~"stop\n"
~"strace\n"
~"symbol-file\n"
~"tabset\n"
~"target\n"
~"task\n"
~"tbreak\n"
~"tcatch\n"
~"tdump\n"
~"teval\n"
~"tfind\n"
~"thbreak\n"
~"thread\n"
~"tp\n"
~"trace\n"
~"tsave\n"
~"tstart\n"
~"tstatus\n"
~"tstop\n"
~"tty\n"
~"tui\n"
~"tvariable\n"
~"undisplay\n"
~"unset\n"
~"until\n"
~"up\n"
~"up-silently\n"
~"update\n"
~"watch\n"
~" *** List may be truncated, max-completions reached. ***\n"
^done
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="0",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 

Breakpoint 14, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 14, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 14, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 14, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 14, Solution3::isMatch (this=0x7fffffffda99, s="bbb", p="**cd") at solution.cpp:157

Breakpoint 15, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=0, pi=0) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}
~"\n\032\032frame-begin 0 0x555555555ee4\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555ee4",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="181"}

Breakpoint 15, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=0, pi=1) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="2",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}

Breakpoint 15, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=0, pi=2) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="3",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}

Breakpoint 15, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=1, pi=3) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="4",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}

Breakpoint 15, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=1, pi=2) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}

Breakpoint 15, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=2, pi=2) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="6",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}

Breakpoint 15, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=3, pi=2) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="7",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}

Breakpoint 15, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=4, pi=3) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="8",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}

Breakpoint 15, Solution4::dfs (this=0x7fffffffda9a, s="adcab", p="**ab", si=5, pi=4) at solution.cpp:180
~"\n\032\032frame-begin 0 0x555555555e9c\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555e9c",func="Solution4::dfs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555559cf",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555d6f",func="Solution3::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555e9c",func="Solution4::dfs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int, int)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="9",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}
[Inferior 1 (process 13694) exited normally]
^error,msg="No registers."
^done,line="157",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"
^done,line="180",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00000000000017c5",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="20",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="5",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="9",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
~"\n\032\032frame-begin 0 0x5555555557c5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555557c5",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="3",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557c5",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"}]}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557c5",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c48",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
~"\n\032\032frame-begin 0 0x5555555557c5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555557c5",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557c5",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c48",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}

Breakpoint 14, Solution3::isMatchB (this=0x7fffffffda99, s=0x555555557396 "bcd", p=0x555555557391 "**cd") at solution.cpp:183
~"\n\032\032frame-begin 0 0x555555555b80\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b80",func="Solution3::isMatchB",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="183"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557c5",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c48",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x55555555737a "abcab", p=0x555555557375 "**ab") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c48\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c48",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557c5",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c48",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c50\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c50",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032frame-begin 0 0x555555555c58\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c58",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="200"}
~"\n\032\032frame-begin 0 0x555555555c75\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c75",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="201"}
~"\n\032\032frame-begin 0 0x555555555c97\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c97",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="207"}
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
~"\n\032\032frame-begin 0 0x5555555557c5\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555557c5",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557c5",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c48",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}

Breakpoint 14, Solution3::isMatchB (this=0x7fffffffda99, s=0x555555557396 "bcd", p=0x555555557391 "**cd") at solution.cpp:183
~"\n\032\032frame-begin 0 0x555555555b80\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b80",func="Solution3::isMatchB",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="183"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557c5",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c48",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x55555555737a "abcab", p=0x555555557375 "**ab") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c48\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c48",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557c5",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b80",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c48",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c50\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c50",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032frame-begin 0 0x555555555c58\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c58",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="200"}
~"\n\032\032frame-begin 0 0x555555555c75\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c75",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="201"}
~"\n\032\032frame-begin 0 0x555555555c97\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c97",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="207"}
&"complete file\n"
~"file\n"
^done
&"complete file a\n"
~"file a.out\n"
^done
~"\n\032\032frame-begin 0 0x555555555c97\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c97",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00000000000017d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b84",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b84",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001c4c",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555555c97:\tpop    %rbp\n"
~"   0x555555555c98:\tretq   \n"
~"   0x555555555c99:\tnop\n"
~"   0x555555555c9a:\tpush   %rbp\n"
~"   0x555555555c9b:\tmov    %rsp,%rbp\n"
~"   0x555555555c9e:\tsub    $0x20,%rsp\n"
~"   0x555555555ca2:\tmov    %rdi,-0x8(%rbp)\n"
~"   0x555555555ca6:\tmov    %rsi,-0x10(%rbp)\n"
~"   0x555555555caa:\tmov    %rdx,-0x18(%rbp)\n"
~"   0x555555555cae:\tmov    -0x8(%rbp),%rax\n"
~"   0x555555555cb2:\tlea    0x16bc(%rip),%rdx        # 0x555555557375\n"
~"   0x555555555cb9:\tlea    0x16ba(%rip),%rsi        # 0x55555555737a\n"
~"   0x555555555cc0:\tmov    %rax,%rdi\n"
~"   0x555555555cc3:\tcallq  0x555555555c38\n"
~"   0x555555555cc8:\ttest   %eax,%eax\n"
~"   0x555555555cca:\tsetne  %al\n"
~"   0x555555555ccd:\tleaveq \n"
~"   0x555555555cce:\tretq   \n"
~"   0x555555555ccf:\tpush   %rbp\n"
~"   0x555555555cd0:\tmov    %rsp,%rbp\n"
~"   0x555555555cd3:\tpush   %rbx\n"
~"   0x555555555cd4:\tsub    $0x28,%rsp\n"
~"   0x555555555cd8:\tmov    %rdi,-0x18(%rbp)\n"
~"   0x555555555cdc:\tmov    %rsi,-0x20(%rbp)\n"
~"   0x555555555ce0:\tmov    %rdx,-0x28(%rbp)\n"
~"   0x555555555ce4:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555555ce8:\tmov    %rax,%rdi\n"
~"   0x555555555ceb:\tcallq  0x555555555fb5\n"
~"   0x555555555cf0:\tmov    %rax,%rbx\n"
~"   0x555555555cf3:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555555cf7:\tmov    %rax,%rdi\n"
~"   0x555555555cfa:\tcallq  0x555555555fb5\n"
~"   0x555555555cff:\tmov    %rax,%rcx\n"
~"   0x555555555d02:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555d06:\tmov    %rax,%rdx\n"
~"   0x555555555d09:\tmov    %rbx,%rsi\n"
~"   0x555555555d0c:\tmov    %rcx,%rdi\n"
~"   0x555555555d0f:\tcallq  0x555555555fc3\n"
~"   0x555555555d14:\tnop\n"
~"   0x555555555d15:\tadd    $0x28,%rsp\n"
~"   0x555555555d19:\tpop    %rbx\n"
~"   0x555555555d1a:\tpop    %rbp\n"
~"   0x555555555d1b:\tretq   \n"
~"   0x555555555d1c:\tpush   %rbp\n"
~"   0x555555555d1d:\tmov    %rsp,%rbp\n"
~"   0x555555555d20:\tsub    $0x10,%rsp\n"
~"   0x555555555d24:\tmov    %rdi,-0x8(%rbp)\n"
~"   0x555555555d28:\tmov    -0x8(%rbp),%rax\n"
~"   0x555555555d2c:\tmov    %rax,%rdi\n"
~"   0x555555555d2f:\tcallq  0x555555555ffe\n"
~"   0x555555555d34:\tnop\n"
~"   0x555555555d35:\tleaveq \n"
~"   0x555555555d36:\tretq   \n"
~"   0x555555555d37:\tnop\n"
~"   0x555555555d38:\tpush   %rbp\n"
~"   0x555555555d39:\tmov    %rsp,%rbp\n"
~"   0x555555555d3c:\tsub    $0x10,%rsp\n"
~"   0x555555555d40:\tmov    %rdi,-0x8(%rbp)\n"
~"   0x555555555d44:\tmov    -0x8(%rbp),%rax\n"
~"   0x555555555d48:\tmov    %rax,%rdi\n"
~"   0x555555555d4b:\tcallq  0x55555555600a\n"
~"   0x555555555d50:\tnop\n"
~"   0x555555555d51:\tleaveq \n"
~"   0x555555555d52:\tretq   \n"
~"   0x555555555d53:\tnop\n"
~"   0x555555555d54:\tpush   %rbp\n"
~"   0x555555555d55:\tmov    %rsp,%rbp\n"
~"   0x555555555d58:\tpush   %rbx\n"
~"   0x555555555d59:\tsub    $0x38,%rsp\n"
~"   0x555555555d5d:\tmov    %rdi,-0x28(%rbp)\n"
~"   0x555555555d61:\tmov    %rsi,-0x30(%rbp)\n"
~"   0x555555555d65:\tmov    %rdx,-0x38(%rbp)\n"
~"   0x555555555d69:\tmov    %rcx,-0x40(%rbp)\n"
~"   0x555555555d6d:\tmov    %fs:0x28,%rax\n"
~"   0x555555555d76:\tmov    %rax,-0x18(%rbp)\n"
~"   0x555555555d7a:\txor    %eax,%eax\n"
~"   0x555555555d7c:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555d80:\tmov    -0x40(%rbp),%rdx\n"
~"   0x555555555d84:\tmov    %rdx,%rsi\n"
~"   0x555555555d87:\tmov    %rax,%rdi\n"
~"   0x555555555d8a:\tcallq  0x555555556032\n"
~"   0x555555555d8f:\tmov    -0x30(%rbp),%rdx\n"
~"   0x555555555d93:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555d97:\tmov    %rdx,%rsi\n"
~"   0x555555555d9a:\tmov    %rax,%rdi\n"
~"   0x555555555d9d:\tcallq  0x5555555560c8\n"
~"   0x555555555da2:\tmov    -0x38(%rbp),%rax\n"
~"   0x555555555da6:\tmovzbl (%rax),%eax\n"
~"   0x555555555da9:\ttest   %al,%al\n"
~"   0x555555555dab:\tje     0x555555555db4\n"
~"   0x555555555dad:\tmov    $0xffffffff,%eax\n"
~"   0x555555555db2:\tjmp    0x555555555db9\n"
~"   0x555555555db4:\tmov    $0x0,%eax\n"
~"   0x555555555db9:\tmov    %eax,-0x1c(%rbp)\n"
~"   0x555555555dbc:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555dc0:\tmov    %rax,%rdi\n"
~"   0x555555555dc3:\tcallq  0x5555555561d6\n"
~"   0x555555555dc8:\tmov    %rax,%rcx\n"
~"   0x555555555dcb:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555dcf:\tmov    (%rax),%rax\n"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
~"\n\032\032frame-begin 0 0x5555555557d9\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555557d9",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}

Breakpoint 14, Solution3::isMatchB (this=0x7fffffffda99, s=0x555555557456 "bcd", p=0x555555557451 "**cd") at solution.cpp:183
~"\n\032\032frame-begin 0 0x555555555b94\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b94",func="Solution3::isMatchB",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="183"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x55555555743a "abcab", p=0x555555557435 "**ab") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c68",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032frame-begin 0 0x555555555c70\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c70",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="200"}
~"\n\032\032frame-begin 0 0x555555555c90\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c90",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="201"}
~"\n\032\032frame-begin 0 0x555555555cb0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cb0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="203"}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x55555555743a "abcab", p=0x555555557435 "**ab") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="2",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
&"complete file\n"
~"file\n"
^done
&"complete file a.\n"
~"file a.out\n"
^done
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="??"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00000000000017d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b84",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001b84",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000000000001c4c",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="2",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
&"disassemble /s\n"
&"\n\032\032error-begin\n"
&"No function contains program counter for selected frame.\n"
~"\n\032\032error\n"
^error,msg="No function contains program counter for selected frame."
&"x/100i $pc\n"
~"=> 0x555555555c60:\tmovq   $0x0,-0x10(%rbp)\n"
~"   0x555555555c68:\tmovq   $0x0,-0x8(%rbp)\n"
~"   0x555555555c70:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555555c74:\tmovzbl (%rax),%eax\n"
~"   0x555555555c77:\ttest   %al,%al\n"
~"   0x555555555c79:\tjne    0x555555555c90\n"
~"   0x555555555c7b:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555c7f:\tmovzbl (%rax),%eax\n"
~"   0x555555555c82:\ttest   %al,%al\n"
~"   0x555555555c84:\tjne    0x555555555c90\n"
~"   0x555555555c86:\tmov    $0x1,%eax\n"
~"   0x555555555c8b:\tjmpq   0x555555555d60\n"
~"   0x555555555c90:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555555c94:\tmovzbl (%rax),%eax\n"
~"   0x555555555c97:\ttest   %al,%al\n"
~"   0x555555555c99:\tjne    0x555555555cb0\n"
~"   0x555555555c9b:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555c9f:\tmovzbl (%rax),%eax\n"
~"   0x555555555ca2:\tcmp    $0x2a,%al\n"
~"   0x555555555ca4:\tje     0x555555555cb0\n"
~"   0x555555555ca6:\tmov    $0x0,%eax\n"
~"   0x555555555cab:\tjmpq   0x555555555d60\n"
~"   0x555555555cb0:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555cb4:\tmovzbl (%rax),%eax\n"
~"   0x555555555cb7:\tcmp    $0x2a,%al\n"
~"   0x555555555cb9:\tjne    0x555555555cea\n"
~"   0x555555555cbb:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555555cbf:\tmov    %rax,-0x10(%rbp)\n"
~"   0x555555555cc3:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555cc7:\tmov    %rax,-0x8(%rbp)\n"
~"   0x555555555ccb:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555ccf:\tlea    0x1(%rax),%rdx\n"
~"   0x555555555cd3:\tmov    %rdx,-0x28(%rbp)\n"
~"   0x555555555cd7:\tmov    -0x20(%rbp),%rsi\n"
~"   0x555555555cdb:\tmov    -0x18(%rbp),%rcx\n"
~"   0x555555555cdf:\tmov    %rax,%rdx\n"
~"   0x555555555ce2:\tmov    %rcx,%rdi\n"
~"   0x555555555ce5:\tcallq  0x555555555c4c\n"
~"   0x555555555cea:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555cee:\tmovzbl (%rax),%eax\n"
~"   0x555555555cf1:\tcmp    $0x3f,%al\n"
~"   0x555555555cf3:\tje     0x555555555d07\n"
~"   0x555555555cf5:\tmov    -0x28(%rbp),%rax\n"
~"   0x555555555cf9:\tmovzbl (%rax),%edx\n"
~"   0x555555555cfc:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555555d00:\tmovzbl (%rax),%eax\n"
~"   0x555555555d03:\tcmp    %al,%dl\n"
~"   0x555555555d05:\tjne    0x555555555d2e\n"
~"   0x555555555d07:\tmov    -0x28(%rbp),%rdx\n"
~"   0x555555555d0b:\tlea    0x1(%rdx),%rax\n"
~"   0x555555555d0f:\tmov    %rax,-0x28(%rbp)\n"
~"   0x555555555d13:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555555d17:\tlea    0x1(%rax),%rcx\n"
~"   0x555555555d1b:\tmov    %rcx,-0x20(%rbp)\n"
~"   0x555555555d1f:\tmov    -0x18(%rbp),%rcx\n"
~"   0x555555555d23:\tmov    %rax,%rsi\n"
~"   0x555555555d26:\tmov    %rcx,%rdi\n"
~"   0x555555555d29:\tcallq  0x555555555c4c\n"
~"   0x555555555d2e:\tcmpq   $0x0,-0x10(%rbp)\n"
~"   0x555555555d33:\tje     0x555555555d5b\n"
~"   0x555555555d35:\tmov    -0x8(%rbp),%rax\n"
~"   0x555555555d39:\tlea    0x1(%rax),%rdx\n"
~"   0x555555555d3d:\tmov    -0x10(%rbp),%rax\n"
~"   0x555555555d41:\tlea    0x1(%rax),%rcx\n"
~"   0x555555555d45:\tmov    -0x18(%rbp),%rax\n"
~"   0x555555555d49:\tmov    %rcx,%rsi\n"
~"   0x555555555d4c:\tmov    %rax,%rdi\n"
~"   0x555555555d4f:\tcallq  0x555555555c4c\n"
~"   0x555555555d54:\taddq   $0x1,-0x10(%rbp)\n"
~"   0x555555555d59:\tjmp    0x555555555d60\n"
~"   0x555555555d5b:\tmov    $0x0,%eax\n"
~"   0x555555555d60:\tleaveq \n"
~"   0x555555555d61:\tretq   \n"
~"   0x555555555d62:\tpush   %rbp\n"
~"   0x555555555d63:\tmov    %rsp,%rbp\n"
~"   0x555555555d66:\tsub    $0x20,%rsp\n"
~"   0x555555555d6a:\tmov    %rdi,-0x8(%rbp)\n"
~"   0x555555555d6e:\tmov    %rsi,-0x10(%rbp)\n"
~"   0x555555555d72:\tmov    %rdx,-0x18(%rbp)\n"
~"   0x555555555d76:\tmov    -0x8(%rbp),%rax\n"
~"   0x555555555d7a:\tlea    0x16b4(%rip),%rdx        # 0x555555557435\n"
~"   0x555555555d81:\tlea    0x16b2(%rip),%rsi        # 0x55555555743a\n"
~"   0x555555555d88:\tmov    %rax,%rdi\n"
~"   0x555555555d8b:\tcallq  0x555555555c4c\n"
~"   0x555555555d90:\ttest   %eax,%eax\n"
~"   0x555555555d92:\tsetne  %al\n"
~"   0x555555555d95:\tleaveq \n"
~"   0x555555555d96:\tretq   \n"
~"   0x555555555d97:\tpush   %rbp\n"
~"   0x555555555d98:\tmov    %rsp,%rbp\n"
~"   0x555555555d9b:\tpush   %rbx\n"
~"   0x555555555d9c:\tsub    $0x28,%rsp\n"
~"   0x555555555da0:\tmov    %rdi,-0x18(%rbp)\n"
~"   0x555555555da4:\tmov    %rsi,-0x20(%rbp)\n"
~"   0x555555555da8:\tmov    %rdx,-0x28(%rbp)\n"
~"   0x555555555dac:\tmov    -0x20(%rbp),%rax\n"
~"   0x555555555db0:\tmov    %rax,%rdi\n"
~"   0x555555555db3:\tcallq  0x55555555607d\n"
~"   0x555555555db8:\tmov    %rax,%rbx\n"
~"   0x555555555dbb:\tmov    -0x18(%rbp),%rax\n"
^done
Starting program: /home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/a.out 
~"\n\032\032frame-begin 0 0x5555555557d9\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x00005555555557d9",func="Solution2::isMatch",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="0",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}

Breakpoint 14, Solution3::isMatchB (this=0x7fffffffda99, s=0x555555557471 "bcd", p=0x55555555746c "**cd") at solution.cpp:183
~"\n\032\032frame-begin 0 0x555555555b94\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555b94",func="Solution3::isMatchB",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="183"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="0",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x555555557455 "abcab", p=0x555555557455 "abcab") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="1",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c68",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032frame-begin 0 0x555555555c70\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c70",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="200"}
~"\n\032\032frame-begin 0 0x555555555c90\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c90",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="201"}
~"\n\032\032frame-begin 0 0x555555555cb0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cb0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="202"}
~"\n\032\032frame-begin 0 0x555555555cd0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cd0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="204"}
~"\n\032\032frame-begin 0 0x555555555d07\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d07",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="205"}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x555555557456 "bcab", p=0x555555557456 "bcab") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="2",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c68",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032frame-begin 0 0x555555555c70\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c70",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="200"}
~"\n\032\032frame-begin 0 0x555555555c90\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c90",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="201"}
~"\n\032\032frame-begin 0 0x555555555cb0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cb0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="202"}
~"\n\032\032frame-begin 0 0x555555555cd0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cd0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="204"}
~"\n\032\032frame-begin 0 0x555555555d07\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d07",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="205"}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x555555557457 "cab", p=0x555555557457 "cab") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="3",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c68",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032frame-begin 0 0x555555555c70\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c70",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="200"}
~"\n\032\032frame-begin 0 0x555555555c90\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c90",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="201"}
~"\n\032\032frame-begin 0 0x555555555cb0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cb0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="202"}
~"\n\032\032frame-begin 0 0x555555555cd0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cd0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="204"}
~"\n\032\032frame-begin 0 0x555555555d07\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d07",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="205"}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x555555557458 "ab", p=0x555555557458 "ab") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="4",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c68",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032frame-begin 0 0x555555555c70\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c70",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="200"}
~"\n\032\032frame-begin 0 0x555555555c90\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c90",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="201"}
~"\n\032\032frame-begin 0 0x555555555cb0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cb0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="202"}
~"\n\032\032frame-begin 0 0x555555555cd0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cd0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="204"}
~"\n\032\032frame-begin 0 0x555555555d07\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d07",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="205"}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x555555557459 "b", p=0x555555557459 "b") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="5",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c68",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032frame-begin 0 0x555555555c70\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c70",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="200"}
~"\n\032\032frame-begin 0 0x555555555c90\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c90",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="201"}
~"\n\032\032frame-begin 0 0x555555555cb0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cb0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="202"}
~"\n\032\032frame-begin 0 0x555555555cd0\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555cd0",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="204"}
~"\n\032\032frame-begin 0 0x555555555d07\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d07",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="205"}

Breakpoint 16, Solution4::drs (this=0x7fffffffda9a, s=0x55555555745a "", p=0x55555555745a "") at solution.cpp:197
~"\n\032\032frame-begin 0 0x555555555c60\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c60",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="197"}
~"\n\032\032breakpoints-headers\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032field 9\n"
~"\n\032\032record\n"
~"\n\032\032field 0\n"
~"\n\032\032field 1\n"
~"\n\032\032field 2\n"
~"\n\032\032field 3\n"
~"\n\032\032field 4\n"
~"\n\032\032field 5\n"
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="4",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="18",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[bkpt={number="13",type="breakpoint",disp="keep",enabled="y",addr="0x00005555555557d9",func="Solution2::isMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="137",thread-groups=["i1"],times="1",script={"silent","printf \"=======================\\n\"","printf \"->i-1=%d,si-1=%d,i=%d,si=%d\\n\",i-1,s[i-1],i,s[i]","printf \"->j-1=%d,pj-1=%d,j=%d,pj=%d\\n\",j-1,p[j-1],j,p[j]","pvector ans","cont"},original-location="solution.cpp:137"},bkpt={number="14",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="157",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->i=%d,ri=%d\\n\",i,ri","printf \"->j=%d,rj=%d\\n\",j,rj","cont"},original-location="solution.cpp:157"},bkpt={number="15",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555b94",func="Solution3::isMatchB(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="180",thread-groups=["i1"],times="1",script={"printf \"=======================\\n\"","printf \"->si=%d,pi=%d\\n\",si,pi"},original-location="solution.cpp:180"},bkpt={number="16",type="breakpoint",disp="keep",enabled="y",addr="0x0000555555555c60",func="Solution4::drs(char const*, char const*)",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="196",thread-groups=["i1"],times="6",original-location="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp:196"}]}
~"\n\032\032frame-begin 0 0x555555555c68\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c68",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="198"}
~"\n\032\032frame-begin 0 0x555555555c70\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555c70",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="200"}
~"\n\032\032frame-begin 0 0x555555555d77\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d77",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="208"}
Solution4::drs (this=0x7fffffffda9a, s=0x55555555745a "", p=0x55555555745a "") at solution.cpp:206
~"\n\032\032frame-begin 0 0x555555555d45\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d45",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="206"}
~"\n\032\032frame-begin 0 0x555555555d72\n"
~"\n\032\032frame-address\n"
~"\n\032\032frame-address-end\n"
~"\n\032\032frame-function-name\n"
~"\n\032\032frame-args\n"
~"\n\032\032frame-source-begin\n"
~"\n\032\032frame-source-file\n"
~"\n\032\032frame-source-file-end\n"
~"\n\032\032frame-source-line\n"
~"\n\032\032frame-source-end\n"
~"\n\032\032frame-end\n"
^done,frame={level="0",addr="0x0000555555555d72",func="Solution4::drs",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",line="207"}

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.

warning: Currently logging to ./.log.txt.  Turn the logging off and on to make the new setting effective.
Reading symbols from a.out...done.

post-prompt
^done,asm_insns=[]
~"\n\032\032breakpoints-table-end\n"
^done,BreakpointTable={nr_rows="0",nr_cols="6",hdr=[{width="7",alignment="-1",col_name="number",colhdr="Num"},{width="14",alignment="-1",col_name="type",colhdr="Type"},{width="4",alignment="-1",col_name="disp",colhdr="Disp"},{width="3",alignment="-1",col_name="enabled",colhdr="Enb"},{width="10",alignment="-1",col_name="addr",colhdr="Address"},{width="40",alignment="2",col_name="what",colhdr="What"}],body=[]}
^error,msg="No registers."
^done,line="225",file="solution.cpp",fullname="/home/dc/5W/algorithm/LeetCode-NOTES/Algorithms/044.Wildcard-Matching/solution.cpp",macro-info="0"
^done
